// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bolt11.dart';
import 'api/bolt12.dart';
import 'api/builder.dart';
import 'api/graph.dart';
import 'api/node.dart';
import 'api/on_chain.dart';
import 'api/spontaneous.dart';
import 'api/types.dart';
import 'api/unified_qr.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'utils/error.dart';

abstract class coreApiImplPlatform extends BaseApiImpl<coreWire> {
  coreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FfiBuilderPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilderPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BuilderPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilderPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NodePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNodePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NetworkGraphPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraphPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_Bolt11PaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_Bolt12PaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12PaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OnchainPaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SpontaneousPaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UnifiedQrPaymentPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPaymentPtr;

  @protected
  FfiBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          dynamic raw);

  @protected
  FfiBuilder
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          dynamic raw);

  @protected
  FfiBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          dynamic raw);

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw);

  @protected
  FfiBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          dynamic raw);

  @protected
  Builder dco_decode_RustOpaque_ldk_nodeBuilder(dynamic raw);

  @protected
  Node dco_decode_RustOpaque_ldk_nodeNode(dynamic raw);

  @protected
  NetworkGraph dco_decode_RustOpaque_ldk_nodegraphNetworkGraph(dynamic raw);

  @protected
  Bolt11Payment dco_decode_RustOpaque_ldk_nodepaymentBolt11Payment(dynamic raw);

  @protected
  Bolt12Payment dco_decode_RustOpaque_ldk_nodepaymentBolt12Payment(dynamic raw);

  @protected
  OnchainPayment dco_decode_RustOpaque_ldk_nodepaymentOnchainPayment(
      dynamic raw);

  @protected
  SpontaneousPayment dco_decode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      dynamic raw);

  @protected
  UnifiedQrPayment dco_decode_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  Address dco_decode_address(dynamic raw);

  @protected
  AnchorChannelsConfig dco_decode_anchor_channels_config(dynamic raw);

  @protected
  BalanceDetails dco_decode_balance_details(dynamic raw);

  @protected
  BalanceSource dco_decode_balance_source(dynamic raw);

  @protected
  BestBlock dco_decode_best_block(dynamic raw);

  @protected
  Bolt11Invoice dco_decode_bolt_11_invoice(dynamic raw);

  @protected
  Bolt12Invoice dco_decode_bolt_12_invoice(dynamic raw);

  @protected
  Bolt12ParseError dco_decode_bolt_12_parse_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Address dco_decode_box_autoadd_address(dynamic raw);

  @protected
  AnchorChannelsConfig dco_decode_box_autoadd_anchor_channels_config(
      dynamic raw);

  @protected
  Bolt11Invoice dco_decode_box_autoadd_bolt_11_invoice(dynamic raw);

  @protected
  Bolt12ParseError dco_decode_box_autoadd_bolt_12_parse_error(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig dco_decode_box_autoadd_channel_config(dynamic raw);

  @protected
  ChannelId dco_decode_box_autoadd_channel_id(dynamic raw);

  @protected
  ChannelInfo dco_decode_box_autoadd_channel_info(dynamic raw);

  @protected
  ChannelUpdateInfo dco_decode_box_autoadd_channel_update_info(dynamic raw);

  @protected
  ClosureReason dco_decode_box_autoadd_closure_reason(dynamic raw);

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw);

  @protected
  DecodeError dco_decode_box_autoadd_decode_error(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_box_autoadd_entropy_source_config(dynamic raw);

  @protected
  EsploraSyncConfig dco_decode_box_autoadd_esplora_sync_config(dynamic raw);

  @protected
  Event dco_decode_box_autoadd_event(dynamic raw);

  @protected
  FfiBolt11Payment dco_decode_box_autoadd_ffi_bolt_11_payment(dynamic raw);

  @protected
  FfiBolt12Payment dco_decode_box_autoadd_ffi_bolt_12_payment(dynamic raw);

  @protected
  FfiMnemonic dco_decode_box_autoadd_ffi_mnemonic(dynamic raw);

  @protected
  FfiNetworkGraph dco_decode_box_autoadd_ffi_network_graph(dynamic raw);

  @protected
  FfiNode dco_decode_box_autoadd_ffi_node(dynamic raw);

  @protected
  FfiOnChainPayment dco_decode_box_autoadd_ffi_on_chain_payment(dynamic raw);

  @protected
  FfiSpontaneousPayment dco_decode_box_autoadd_ffi_spontaneous_payment(
      dynamic raw);

  @protected
  FfiUnifiedQrPayment dco_decode_box_autoadd_ffi_unified_qr_payment(
      dynamic raw);

  @protected
  GossipSourceConfig dco_decode_box_autoadd_gossip_source_config(dynamic raw);

  @protected
  LiquiditySourceConfig dco_decode_box_autoadd_liquidity_source_config(
      dynamic raw);

  @protected
  LSPFeeLimits dco_decode_box_autoadd_lsp_fee_limits(dynamic raw);

  @protected
  MaxTotalRoutingFeeLimit dco_decode_box_autoadd_max_total_routing_fee_limit(
      dynamic raw);

  @protected
  NodeAlias dco_decode_box_autoadd_node_alias(dynamic raw);

  @protected
  NodeAnnouncementInfo dco_decode_box_autoadd_node_announcement_info(
      dynamic raw);

  @protected
  NodeId dco_decode_box_autoadd_node_id(dynamic raw);

  @protected
  NodeInfo dco_decode_box_autoadd_node_info(dynamic raw);

  @protected
  Offer dco_decode_box_autoadd_offer(dynamic raw);

  @protected
  OfferId dco_decode_box_autoadd_offer_id(dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentFailureReason dco_decode_box_autoadd_payment_failure_reason(
      dynamic raw);

  @protected
  PaymentHash dco_decode_box_autoadd_payment_hash(dynamic raw);

  @protected
  PaymentId dco_decode_box_autoadd_payment_id(dynamic raw);

  @protected
  PaymentPreimage dco_decode_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey dco_decode_box_autoadd_public_key(dynamic raw);

  @protected
  Refund dco_decode_box_autoadd_refund(dynamic raw);

  @protected
  SendingParameters dco_decode_box_autoadd_sending_parameters(dynamic raw);

  @protected
  SocketAddress dco_decode_box_autoadd_socket_address(dynamic raw);

  @protected
  Txid dco_decode_box_autoadd_txid(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  UserChannelId dco_decode_box_autoadd_user_channel_id(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_chain_data_source_config(dynamic raw);

  @protected
  ChannelConfig dco_decode_channel_config(dynamic raw);

  @protected
  ChannelDetails dco_decode_channel_details(dynamic raw);

  @protected
  ChannelId dco_decode_channel_id(dynamic raw);

  @protected
  ChannelInfo dco_decode_channel_info(dynamic raw);

  @protected
  ChannelUpdateInfo dco_decode_channel_update_info(dynamic raw);

  @protected
  ClosureReason dco_decode_closure_reason(dynamic raw);

  @protected
  Config dco_decode_config(dynamic raw);

  @protected
  DecodeError dco_decode_decode_error(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_entropy_source_config(dynamic raw);

  @protected
  EsploraSyncConfig dco_decode_esplora_sync_config(dynamic raw);

  @protected
  Event dco_decode_event(dynamic raw);

  @protected
  FfiBolt11Payment dco_decode_ffi_bolt_11_payment(dynamic raw);

  @protected
  FfiBolt12Payment dco_decode_ffi_bolt_12_payment(dynamic raw);

  @protected
  FfiBuilderError dco_decode_ffi_builder_error(dynamic raw);

  @protected
  FfiMnemonic dco_decode_ffi_mnemonic(dynamic raw);

  @protected
  FfiNetworkGraph dco_decode_ffi_network_graph(dynamic raw);

  @protected
  FfiNode dco_decode_ffi_node(dynamic raw);

  @protected
  FfiNodeError dco_decode_ffi_node_error(dynamic raw);

  @protected
  FfiOnChainPayment dco_decode_ffi_on_chain_payment(dynamic raw);

  @protected
  FfiSpontaneousPayment dco_decode_ffi_spontaneous_payment(dynamic raw);

  @protected
  FfiUnifiedQrPayment dco_decode_ffi_unified_qr_payment(dynamic raw);

  @protected
  GossipSourceConfig dco_decode_gossip_source_config(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  LightningBalance dco_decode_lightning_balance(dynamic raw);

  @protected
  LiquiditySourceConfig dco_decode_liquidity_source_config(dynamic raw);

  @protected
  List<ChannelDetails> dco_decode_list_channel_details(dynamic raw);

  @protected
  List<LightningBalance> dco_decode_list_lightning_balance(dynamic raw);

  @protected
  List<NodeId> dco_decode_list_node_id(dynamic raw);

  @protected
  List<PaymentDetails> dco_decode_list_payment_details(dynamic raw);

  @protected
  List<PeerDetails> dco_decode_list_peer_details(dynamic raw);

  @protected
  List<PendingSweepBalance> dco_decode_list_pending_sweep_balance(dynamic raw);

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<PublicKey> dco_decode_list_public_key(dynamic raw);

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  List<SocketAddress> dco_decode_list_socket_address(dynamic raw);

  @protected
  LogLevel dco_decode_log_level(dynamic raw);

  @protected
  LSPFeeLimits dco_decode_lsp_fee_limits(dynamic raw);

  @protected
  MaxDustHTLCExposure dco_decode_max_dust_htlc_exposure(dynamic raw);

  @protected
  MaxTotalRoutingFeeLimit dco_decode_max_total_routing_fee_limit(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  NodeAlias dco_decode_node_alias(dynamic raw);

  @protected
  NodeAnnouncementInfo dco_decode_node_announcement_info(dynamic raw);

  @protected
  NodeId dco_decode_node_id(dynamic raw);

  @protected
  NodeInfo dco_decode_node_info(dynamic raw);

  @protected
  NodeStatus dco_decode_node_status(dynamic raw);

  @protected
  Offer dco_decode_offer(dynamic raw);

  @protected
  OfferId dco_decode_offer_id(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  AnchorChannelsConfig? dco_decode_opt_box_autoadd_anchor_channels_config(
      dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  ChainDataSourceConfig? dco_decode_opt_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig? dco_decode_opt_box_autoadd_channel_config(dynamic raw);

  @protected
  ChannelId? dco_decode_opt_box_autoadd_channel_id(dynamic raw);

  @protected
  ChannelInfo? dco_decode_opt_box_autoadd_channel_info(dynamic raw);

  @protected
  ChannelUpdateInfo? dco_decode_opt_box_autoadd_channel_update_info(
      dynamic raw);

  @protected
  ClosureReason? dco_decode_opt_box_autoadd_closure_reason(dynamic raw);

  @protected
  EntropySourceConfig? dco_decode_opt_box_autoadd_entropy_source_config(
      dynamic raw);

  @protected
  EsploraSyncConfig? dco_decode_opt_box_autoadd_esplora_sync_config(
      dynamic raw);

  @protected
  Event? dco_decode_opt_box_autoadd_event(dynamic raw);

  @protected
  GossipSourceConfig? dco_decode_opt_box_autoadd_gossip_source_config(
      dynamic raw);

  @protected
  LiquiditySourceConfig? dco_decode_opt_box_autoadd_liquidity_source_config(
      dynamic raw);

  @protected
  MaxTotalRoutingFeeLimit?
      dco_decode_opt_box_autoadd_max_total_routing_fee_limit(dynamic raw);

  @protected
  NodeAlias? dco_decode_opt_box_autoadd_node_alias(dynamic raw);

  @protected
  NodeAnnouncementInfo? dco_decode_opt_box_autoadd_node_announcement_info(
      dynamic raw);

  @protected
  NodeInfo? dco_decode_opt_box_autoadd_node_info(dynamic raw);

  @protected
  OutPoint? dco_decode_opt_box_autoadd_out_point(dynamic raw);

  @protected
  PaymentDetails? dco_decode_opt_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentFailureReason? dco_decode_opt_box_autoadd_payment_failure_reason(
      dynamic raw);

  @protected
  PaymentHash? dco_decode_opt_box_autoadd_payment_hash(dynamic raw);

  @protected
  PaymentId? dco_decode_opt_box_autoadd_payment_id(dynamic raw);

  @protected
  PaymentPreimage? dco_decode_opt_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret? dco_decode_opt_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey? dco_decode_opt_box_autoadd_public_key(dynamic raw);

  @protected
  SendingParameters? dco_decode_opt_box_autoadd_sending_parameters(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  List<SocketAddress>? dco_decode_opt_list_socket_address(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_payment_details(dynamic raw);

  @protected
  PaymentDirection dco_decode_payment_direction(dynamic raw);

  @protected
  PaymentFailureReason dco_decode_payment_failure_reason(dynamic raw);

  @protected
  PaymentHash dco_decode_payment_hash(dynamic raw);

  @protected
  PaymentId dco_decode_payment_id(dynamic raw);

  @protected
  PaymentKind dco_decode_payment_kind(dynamic raw);

  @protected
  PaymentPreimage dco_decode_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_payment_secret(dynamic raw);

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw);

  @protected
  PeerDetails dco_decode_peer_details(dynamic raw);

  @protected
  PendingSweepBalance dco_decode_pending_sweep_balance(dynamic raw);

  @protected
  PublicKey dco_decode_public_key(dynamic raw);

  @protected
  QrPaymentResult dco_decode_qr_payment_result(dynamic raw);

  @protected
  (SocketAddress, PublicKey, String?)
      dco_decode_record_socket_address_public_key_opt_string(dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  Refund dco_decode_refund(dynamic raw);

  @protected
  RoutingFees dco_decode_routing_fees(dynamic raw);

  @protected
  SendingParameters dco_decode_sending_parameters(dynamic raw);

  @protected
  SocketAddress dco_decode_socket_address(dynamic raw);

  @protected
  Txid dco_decode_txid(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array12 dco_decode_u_8_array_12(dynamic raw);

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw);

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserChannelId dco_decode_user_channel_id(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  FfiBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          SseDeserializer deserializer);

  @protected
  FfiBuilder
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          SseDeserializer deserializer);

  @protected
  FfiBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          SseDeserializer deserializer);

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer);

  @protected
  FfiBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          SseDeserializer deserializer);

  @protected
  Builder sse_decode_RustOpaque_ldk_nodeBuilder(SseDeserializer deserializer);

  @protected
  Node sse_decode_RustOpaque_ldk_nodeNode(SseDeserializer deserializer);

  @protected
  NetworkGraph sse_decode_RustOpaque_ldk_nodegraphNetworkGraph(
      SseDeserializer deserializer);

  @protected
  Bolt11Payment sse_decode_RustOpaque_ldk_nodepaymentBolt11Payment(
      SseDeserializer deserializer);

  @protected
  Bolt12Payment sse_decode_RustOpaque_ldk_nodepaymentBolt12Payment(
      SseDeserializer deserializer);

  @protected
  OnchainPayment sse_decode_RustOpaque_ldk_nodepaymentOnchainPayment(
      SseDeserializer deserializer);

  @protected
  SpontaneousPayment sse_decode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      SseDeserializer deserializer);

  @protected
  UnifiedQrPayment sse_decode_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  Address sse_decode_address(SseDeserializer deserializer);

  @protected
  AnchorChannelsConfig sse_decode_anchor_channels_config(
      SseDeserializer deserializer);

  @protected
  BalanceDetails sse_decode_balance_details(SseDeserializer deserializer);

  @protected
  BalanceSource sse_decode_balance_source(SseDeserializer deserializer);

  @protected
  BestBlock sse_decode_best_block(SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_bolt_11_invoice(SseDeserializer deserializer);

  @protected
  Bolt12Invoice sse_decode_bolt_12_invoice(SseDeserializer deserializer);

  @protected
  Bolt12ParseError sse_decode_bolt_12_parse_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Address sse_decode_box_autoadd_address(SseDeserializer deserializer);

  @protected
  AnchorChannelsConfig sse_decode_box_autoadd_anchor_channels_config(
      SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_box_autoadd_bolt_11_invoice(
      SseDeserializer deserializer);

  @protected
  Bolt12ParseError sse_decode_box_autoadd_bolt_12_parse_error(
      SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_box_autoadd_channel_id(SseDeserializer deserializer);

  @protected
  ChannelInfo sse_decode_box_autoadd_channel_info(SseDeserializer deserializer);

  @protected
  ChannelUpdateInfo sse_decode_box_autoadd_channel_update_info(
      SseDeserializer deserializer);

  @protected
  ClosureReason sse_decode_box_autoadd_closure_reason(
      SseDeserializer deserializer);

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer);

  @protected
  DecodeError sse_decode_box_autoadd_decode_error(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  EsploraSyncConfig sse_decode_box_autoadd_esplora_sync_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_box_autoadd_event(SseDeserializer deserializer);

  @protected
  FfiBolt11Payment sse_decode_box_autoadd_ffi_bolt_11_payment(
      SseDeserializer deserializer);

  @protected
  FfiBolt12Payment sse_decode_box_autoadd_ffi_bolt_12_payment(
      SseDeserializer deserializer);

  @protected
  FfiMnemonic sse_decode_box_autoadd_ffi_mnemonic(SseDeserializer deserializer);

  @protected
  FfiNetworkGraph sse_decode_box_autoadd_ffi_network_graph(
      SseDeserializer deserializer);

  @protected
  FfiNode sse_decode_box_autoadd_ffi_node(SseDeserializer deserializer);

  @protected
  FfiOnChainPayment sse_decode_box_autoadd_ffi_on_chain_payment(
      SseDeserializer deserializer);

  @protected
  FfiSpontaneousPayment sse_decode_box_autoadd_ffi_spontaneous_payment(
      SseDeserializer deserializer);

  @protected
  FfiUnifiedQrPayment sse_decode_box_autoadd_ffi_unified_qr_payment(
      SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig sse_decode_box_autoadd_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  LSPFeeLimits sse_decode_box_autoadd_lsp_fee_limits(
      SseDeserializer deserializer);

  @protected
  MaxTotalRoutingFeeLimit sse_decode_box_autoadd_max_total_routing_fee_limit(
      SseDeserializer deserializer);

  @protected
  NodeAlias sse_decode_box_autoadd_node_alias(SseDeserializer deserializer);

  @protected
  NodeAnnouncementInfo sse_decode_box_autoadd_node_announcement_info(
      SseDeserializer deserializer);

  @protected
  NodeId sse_decode_box_autoadd_node_id(SseDeserializer deserializer);

  @protected
  NodeInfo sse_decode_box_autoadd_node_info(SseDeserializer deserializer);

  @protected
  Offer sse_decode_box_autoadd_offer(SseDeserializer deserializer);

  @protected
  OfferId sse_decode_box_autoadd_offer_id(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentFailureReason sse_decode_box_autoadd_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_box_autoadd_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentId sse_decode_box_autoadd_payment_id(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_box_autoadd_public_key(SseDeserializer deserializer);

  @protected
  Refund sse_decode_box_autoadd_refund(SseDeserializer deserializer);

  @protected
  SendingParameters sse_decode_box_autoadd_sending_parameters(
      SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_box_autoadd_socket_address(
      SseDeserializer deserializer);

  @protected
  Txid sse_decode_box_autoadd_txid(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_box_autoadd_user_channel_id(
      SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_channel_config(SseDeserializer deserializer);

  @protected
  ChannelDetails sse_decode_channel_details(SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_channel_id(SseDeserializer deserializer);

  @protected
  ChannelInfo sse_decode_channel_info(SseDeserializer deserializer);

  @protected
  ChannelUpdateInfo sse_decode_channel_update_info(
      SseDeserializer deserializer);

  @protected
  ClosureReason sse_decode_closure_reason(SseDeserializer deserializer);

  @protected
  Config sse_decode_config(SseDeserializer deserializer);

  @protected
  DecodeError sse_decode_decode_error(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  EsploraSyncConfig sse_decode_esplora_sync_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_event(SseDeserializer deserializer);

  @protected
  FfiBolt11Payment sse_decode_ffi_bolt_11_payment(SseDeserializer deserializer);

  @protected
  FfiBolt12Payment sse_decode_ffi_bolt_12_payment(SseDeserializer deserializer);

  @protected
  FfiBuilderError sse_decode_ffi_builder_error(SseDeserializer deserializer);

  @protected
  FfiMnemonic sse_decode_ffi_mnemonic(SseDeserializer deserializer);

  @protected
  FfiNetworkGraph sse_decode_ffi_network_graph(SseDeserializer deserializer);

  @protected
  FfiNode sse_decode_ffi_node(SseDeserializer deserializer);

  @protected
  FfiNodeError sse_decode_ffi_node_error(SseDeserializer deserializer);

  @protected
  FfiOnChainPayment sse_decode_ffi_on_chain_payment(
      SseDeserializer deserializer);

  @protected
  FfiSpontaneousPayment sse_decode_ffi_spontaneous_payment(
      SseDeserializer deserializer);

  @protected
  FfiUnifiedQrPayment sse_decode_ffi_unified_qr_payment(
      SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  LightningBalance sse_decode_lightning_balance(SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig sse_decode_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  List<ChannelDetails> sse_decode_list_channel_details(
      SseDeserializer deserializer);

  @protected
  List<LightningBalance> sse_decode_list_lightning_balance(
      SseDeserializer deserializer);

  @protected
  List<NodeId> sse_decode_list_node_id(SseDeserializer deserializer);

  @protected
  List<PaymentDetails> sse_decode_list_payment_details(
      SseDeserializer deserializer);

  @protected
  List<PeerDetails> sse_decode_list_peer_details(SseDeserializer deserializer);

  @protected
  List<PendingSweepBalance> sse_decode_list_pending_sweep_balance(
      SseDeserializer deserializer);

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<PublicKey> sse_decode_list_public_key(SseDeserializer deserializer);

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer);

  @protected
  List<SocketAddress> sse_decode_list_socket_address(
      SseDeserializer deserializer);

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer);

  @protected
  LSPFeeLimits sse_decode_lsp_fee_limits(SseDeserializer deserializer);

  @protected
  MaxDustHTLCExposure sse_decode_max_dust_htlc_exposure(
      SseDeserializer deserializer);

  @protected
  MaxTotalRoutingFeeLimit sse_decode_max_total_routing_fee_limit(
      SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  NodeAlias sse_decode_node_alias(SseDeserializer deserializer);

  @protected
  NodeAnnouncementInfo sse_decode_node_announcement_info(
      SseDeserializer deserializer);

  @protected
  NodeId sse_decode_node_id(SseDeserializer deserializer);

  @protected
  NodeInfo sse_decode_node_info(SseDeserializer deserializer);

  @protected
  NodeStatus sse_decode_node_status(SseDeserializer deserializer);

  @protected
  Offer sse_decode_offer(SseDeserializer deserializer);

  @protected
  OfferId sse_decode_offer_id(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  AnchorChannelsConfig? sse_decode_opt_box_autoadd_anchor_channels_config(
      SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig? sse_decode_opt_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig? sse_decode_opt_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  ChannelId? sse_decode_opt_box_autoadd_channel_id(
      SseDeserializer deserializer);

  @protected
  ChannelInfo? sse_decode_opt_box_autoadd_channel_info(
      SseDeserializer deserializer);

  @protected
  ChannelUpdateInfo? sse_decode_opt_box_autoadd_channel_update_info(
      SseDeserializer deserializer);

  @protected
  ClosureReason? sse_decode_opt_box_autoadd_closure_reason(
      SseDeserializer deserializer);

  @protected
  EntropySourceConfig? sse_decode_opt_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  EsploraSyncConfig? sse_decode_opt_box_autoadd_esplora_sync_config(
      SseDeserializer deserializer);

  @protected
  Event? sse_decode_opt_box_autoadd_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig? sse_decode_opt_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  LiquiditySourceConfig? sse_decode_opt_box_autoadd_liquidity_source_config(
      SseDeserializer deserializer);

  @protected
  MaxTotalRoutingFeeLimit?
      sse_decode_opt_box_autoadd_max_total_routing_fee_limit(
          SseDeserializer deserializer);

  @protected
  NodeAlias? sse_decode_opt_box_autoadd_node_alias(
      SseDeserializer deserializer);

  @protected
  NodeAnnouncementInfo? sse_decode_opt_box_autoadd_node_announcement_info(
      SseDeserializer deserializer);

  @protected
  NodeInfo? sse_decode_opt_box_autoadd_node_info(SseDeserializer deserializer);

  @protected
  OutPoint? sse_decode_opt_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails? sse_decode_opt_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentFailureReason? sse_decode_opt_box_autoadd_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentHash? sse_decode_opt_box_autoadd_payment_hash(
      SseDeserializer deserializer);

  @protected
  PaymentId? sse_decode_opt_box_autoadd_payment_id(
      SseDeserializer deserializer);

  @protected
  PaymentPreimage? sse_decode_opt_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret? sse_decode_opt_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey? sse_decode_opt_box_autoadd_public_key(
      SseDeserializer deserializer);

  @protected
  SendingParameters? sse_decode_opt_box_autoadd_sending_parameters(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  List<SocketAddress>? sse_decode_opt_list_socket_address(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_payment_details(SseDeserializer deserializer);

  @protected
  PaymentDirection sse_decode_payment_direction(SseDeserializer deserializer);

  @protected
  PaymentFailureReason sse_decode_payment_failure_reason(
      SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentId sse_decode_payment_id(SseDeserializer deserializer);

  @protected
  PaymentKind sse_decode_payment_kind(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_payment_preimage(SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_payment_secret(SseDeserializer deserializer);

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer);

  @protected
  PeerDetails sse_decode_peer_details(SseDeserializer deserializer);

  @protected
  PendingSweepBalance sse_decode_pending_sweep_balance(
      SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_public_key(SseDeserializer deserializer);

  @protected
  QrPaymentResult sse_decode_qr_payment_result(SseDeserializer deserializer);

  @protected
  (SocketAddress, PublicKey, String?)
      sse_decode_record_socket_address_public_key_opt_string(
          SseDeserializer deserializer);

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer);

  @protected
  Refund sse_decode_refund(SseDeserializer deserializer);

  @protected
  RoutingFees sse_decode_routing_fees(SseDeserializer deserializer);

  @protected
  SendingParameters sse_decode_sending_parameters(SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_socket_address(SseDeserializer deserializer);

  @protected
  Txid sse_decode_txid(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array12 sse_decode_u_8_array_12(SseDeserializer deserializer);

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer);

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_user_channel_id(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_record_string_string> cst_encode_Map_String_String(
      Map<String, String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_record_string_string(
        raw.entries.map((e) => (e.key, e.value)).toList());
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_address> cst_encode_box_autoadd_address(Address raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address();
    cst_api_fill_to_wire_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_anchor_channels_config>
      cst_encode_box_autoadd_anchor_channels_config(AnchorChannelsConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_anchor_channels_config();
    cst_api_fill_to_wire_anchor_channels_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bolt_11_invoice> cst_encode_box_autoadd_bolt_11_invoice(
      Bolt11Invoice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bolt_11_invoice();
    cst_api_fill_to_wire_bolt_11_invoice(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bolt_12_parse_error>
      cst_encode_box_autoadd_bolt_12_parse_error(Bolt12ParseError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bolt_12_parse_error();
    cst_api_fill_to_wire_bolt_12_parse_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_box_autoadd_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_bool(cst_encode_bool(raw));
  }

  @protected
  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_encode_box_autoadd_chain_data_source_config(
          ChainDataSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_chain_data_source_config();
    cst_api_fill_to_wire_chain_data_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_config> cst_encode_box_autoadd_channel_config(
      ChannelConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_config();
    cst_api_fill_to_wire_channel_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_id> cst_encode_box_autoadd_channel_id(
      ChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_id();
    cst_api_fill_to_wire_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_info> cst_encode_box_autoadd_channel_info(
      ChannelInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_info();
    cst_api_fill_to_wire_channel_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_channel_update_info>
      cst_encode_box_autoadd_channel_update_info(ChannelUpdateInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_channel_update_info();
    cst_api_fill_to_wire_channel_update_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_closure_reason> cst_encode_box_autoadd_closure_reason(
      ClosureReason raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_closure_reason();
    cst_api_fill_to_wire_closure_reason(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_config> cst_encode_box_autoadd_config(Config raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_config();
    cst_api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_decode_error> cst_encode_box_autoadd_decode_error(
      DecodeError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_decode_error();
    cst_api_fill_to_wire_decode_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_entropy_source_config>
      cst_encode_box_autoadd_entropy_source_config(EntropySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_entropy_source_config();
    cst_api_fill_to_wire_entropy_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_esplora_sync_config>
      cst_encode_box_autoadd_esplora_sync_config(EsploraSyncConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_esplora_sync_config();
    cst_api_fill_to_wire_esplora_sync_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_event> cst_encode_box_autoadd_event(Event raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_event();
    cst_api_fill_to_wire_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_bolt_11_payment>
      cst_encode_box_autoadd_ffi_bolt_11_payment(FfiBolt11Payment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_bolt_11_payment();
    cst_api_fill_to_wire_ffi_bolt_11_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_bolt_12_payment>
      cst_encode_box_autoadd_ffi_bolt_12_payment(FfiBolt12Payment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_bolt_12_payment();
    cst_api_fill_to_wire_ffi_bolt_12_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_mnemonic> cst_encode_box_autoadd_ffi_mnemonic(
      FfiMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_mnemonic();
    cst_api_fill_to_wire_ffi_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_network_graph>
      cst_encode_box_autoadd_ffi_network_graph(FfiNetworkGraph raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_network_graph();
    cst_api_fill_to_wire_ffi_network_graph(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_node> cst_encode_box_autoadd_ffi_node(FfiNode raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_node();
    cst_api_fill_to_wire_ffi_node(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_on_chain_payment>
      cst_encode_box_autoadd_ffi_on_chain_payment(FfiOnChainPayment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_on_chain_payment();
    cst_api_fill_to_wire_ffi_on_chain_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_spontaneous_payment>
      cst_encode_box_autoadd_ffi_spontaneous_payment(
          FfiSpontaneousPayment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_spontaneous_payment();
    cst_api_fill_to_wire_ffi_spontaneous_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_unified_qr_payment>
      cst_encode_box_autoadd_ffi_unified_qr_payment(FfiUnifiedQrPayment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_unified_qr_payment();
    cst_api_fill_to_wire_ffi_unified_qr_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_gossip_source_config>
      cst_encode_box_autoadd_gossip_source_config(GossipSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_gossip_source_config();
    cst_api_fill_to_wire_gossip_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_encode_box_autoadd_liquidity_source_config(
          LiquiditySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_liquidity_source_config();
    cst_api_fill_to_wire_liquidity_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lsp_fee_limits> cst_encode_box_autoadd_lsp_fee_limits(
      LSPFeeLimits raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lsp_fee_limits();
    cst_api_fill_to_wire_lsp_fee_limits(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_max_total_routing_fee_limit>
      cst_encode_box_autoadd_max_total_routing_fee_limit(
          MaxTotalRoutingFeeLimit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_max_total_routing_fee_limit();
    cst_api_fill_to_wire_max_total_routing_fee_limit(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_alias> cst_encode_box_autoadd_node_alias(
      NodeAlias raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_alias();
    cst_api_fill_to_wire_node_alias(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_announcement_info>
      cst_encode_box_autoadd_node_announcement_info(NodeAnnouncementInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_announcement_info();
    cst_api_fill_to_wire_node_announcement_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_id> cst_encode_box_autoadd_node_id(NodeId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_id();
    cst_api_fill_to_wire_node_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_info> cst_encode_box_autoadd_node_info(
      NodeInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_info();
    cst_api_fill_to_wire_node_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_offer> cst_encode_box_autoadd_offer(Offer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_offer();
    cst_api_fill_to_wire_offer(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_offer_id> cst_encode_box_autoadd_offer_id(OfferId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_offer_id();
    cst_api_fill_to_wire_offer_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_box_autoadd_out_point(
      OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_out_point();
    cst_api_fill_to_wire_out_point(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_details> cst_encode_box_autoadd_payment_details(
      PaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_details();
    cst_api_fill_to_wire_payment_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_payment_failure_reason(
      PaymentFailureReason raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_payment_failure_reason(
        cst_encode_payment_failure_reason(raw));
  }

  @protected
  ffi.Pointer<wire_cst_payment_hash> cst_encode_box_autoadd_payment_hash(
      PaymentHash raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_hash();
    cst_api_fill_to_wire_payment_hash(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_id> cst_encode_box_autoadd_payment_id(
      PaymentId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_id();
    cst_api_fill_to_wire_payment_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_preimage>
      cst_encode_box_autoadd_payment_preimage(PaymentPreimage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_preimage();
    cst_api_fill_to_wire_payment_preimage(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_secret> cst_encode_box_autoadd_payment_secret(
      PaymentSecret raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_secret();
    cst_api_fill_to_wire_payment_secret(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_public_key> cst_encode_box_autoadd_public_key(
      PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_public_key();
    cst_api_fill_to_wire_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_refund> cst_encode_box_autoadd_refund(Refund raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_refund();
    cst_api_fill_to_wire_refund(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sending_parameters>
      cst_encode_box_autoadd_sending_parameters(SendingParameters raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sending_parameters();
    cst_api_fill_to_wire_sending_parameters(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_socket_address> cst_encode_box_autoadd_socket_address(
      SocketAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_socket_address();
    cst_api_fill_to_wire_socket_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_txid> cst_encode_box_autoadd_txid(Txid raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_txid();
    cst_api_fill_to_wire_txid(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint16> cst_encode_box_autoadd_u_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_16(cst_encode_u_16(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_box_autoadd_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_8(cst_encode_u_8(raw));
  }

  @protected
  ffi.Pointer<wire_cst_user_channel_id> cst_encode_box_autoadd_user_channel_id(
      UserChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_user_channel_id();
    cst_api_fill_to_wire_user_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_channel_details> cst_encode_list_channel_details(
      List<ChannelDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_channel_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_channel_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_lightning_balance>
      cst_encode_list_lightning_balance(List<LightningBalance> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_lightning_balance(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_lightning_balance(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_node_id> cst_encode_list_node_id(List<NodeId> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_node_id(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_node_id(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_payment_details> cst_encode_list_payment_details(
      List<PaymentDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_payment_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_payment_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_peer_details> cst_encode_list_peer_details(
      List<PeerDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_peer_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_peer_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_pending_sweep_balance>
      cst_encode_list_pending_sweep_balance(List<PendingSweepBalance> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_pending_sweep_balance(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_pending_sweep_balance(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_64_strict> cst_encode_list_prim_u_64_strict(
      Uint64List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_64_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_public_key> cst_encode_list_public_key(
      List<PublicKey> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_public_key(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_record_string_string>
      cst_encode_list_record_string_string(List<(String, String)> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_record_string_string(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_record_string_string(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_socket_address> cst_encode_list_socket_address(
      List<SocketAddress> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_socket_address(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_socket_address(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_anchor_channels_config>
      cst_encode_opt_box_autoadd_anchor_channels_config(
          AnchorChannelsConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_anchor_channels_config(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_opt_box_autoadd_bool(bool? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_encode_opt_box_autoadd_chain_data_source_config(
          ChainDataSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_chain_data_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_config>
      cst_encode_opt_box_autoadd_channel_config(ChannelConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_channel_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_id> cst_encode_opt_box_autoadd_channel_id(
      ChannelId? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_channel_id(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_info> cst_encode_opt_box_autoadd_channel_info(
      ChannelInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_channel_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_channel_update_info>
      cst_encode_opt_box_autoadd_channel_update_info(ChannelUpdateInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_channel_update_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_closure_reason>
      cst_encode_opt_box_autoadd_closure_reason(ClosureReason? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_closure_reason(raw);
  }

  @protected
  ffi.Pointer<wire_cst_entropy_source_config>
      cst_encode_opt_box_autoadd_entropy_source_config(
          EntropySourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_entropy_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_esplora_sync_config>
      cst_encode_opt_box_autoadd_esplora_sync_config(EsploraSyncConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_esplora_sync_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_event> cst_encode_opt_box_autoadd_event(Event? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_event(raw);
  }

  @protected
  ffi.Pointer<wire_cst_gossip_source_config>
      cst_encode_opt_box_autoadd_gossip_source_config(GossipSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_gossip_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_encode_opt_box_autoadd_liquidity_source_config(
          LiquiditySourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_liquidity_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_cst_max_total_routing_fee_limit>
      cst_encode_opt_box_autoadd_max_total_routing_fee_limit(
          MaxTotalRoutingFeeLimit? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_max_total_routing_fee_limit(raw);
  }

  @protected
  ffi.Pointer<wire_cst_node_alias> cst_encode_opt_box_autoadd_node_alias(
      NodeAlias? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_node_alias(raw);
  }

  @protected
  ffi.Pointer<wire_cst_node_announcement_info>
      cst_encode_opt_box_autoadd_node_announcement_info(
          NodeAnnouncementInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_node_announcement_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_node_info> cst_encode_opt_box_autoadd_node_info(
      NodeInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_node_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_opt_box_autoadd_out_point(
      OutPoint? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_out_point(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_details>
      cst_encode_opt_box_autoadd_payment_details(PaymentDetails? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_details(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_payment_failure_reason(
      PaymentFailureReason? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_failure_reason(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_hash> cst_encode_opt_box_autoadd_payment_hash(
      PaymentHash? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_payment_hash(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_id> cst_encode_opt_box_autoadd_payment_id(
      PaymentId? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_payment_id(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_preimage>
      cst_encode_opt_box_autoadd_payment_preimage(PaymentPreimage? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_preimage(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment_secret>
      cst_encode_opt_box_autoadd_payment_secret(PaymentSecret? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_payment_secret(raw);
  }

  @protected
  ffi.Pointer<wire_cst_public_key> cst_encode_opt_box_autoadd_public_key(
      PublicKey? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_public_key(raw);
  }

  @protected
  ffi.Pointer<wire_cst_sending_parameters>
      cst_encode_opt_box_autoadd_sending_parameters(SendingParameters? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_sending_parameters(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint16> cst_encode_opt_box_autoadd_u_16(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_16(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_opt_box_autoadd_u_8(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_socket_address> cst_encode_opt_list_socket_address(
      List<SocketAddress>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_socket_address(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_12(
      U8Array12 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(12);
    ans.ref.ptr.asTypedList(12).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_16(
      U8Array16 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(16);
    ans.ref.ptr.asTypedList(16).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_32(
      U8Array32 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_4(
      U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_64(
      U8Array64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(64);
    ans.ref.ptr.asTypedList(64).setAll(0, raw);
    return ans;
  }

  @protected
  int cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_address(Address apiObj, wire_cst_address wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_anchor_channels_config(
      AnchorChannelsConfig apiObj, wire_cst_anchor_channels_config wireObj) {
    wireObj.trusted_peers_no_reserve =
        cst_encode_list_public_key(apiObj.trustedPeersNoReserve);
    wireObj.per_channel_reserve_sats =
        cst_encode_u_64(apiObj.perChannelReserveSats);
  }

  @protected
  void cst_api_fill_to_wire_balance_details(
      BalanceDetails apiObj, wire_cst_balance_details wireObj) {
    wireObj.total_onchain_balance_sats =
        cst_encode_u_64(apiObj.totalOnchainBalanceSats);
    wireObj.spendable_onchain_balance_sats =
        cst_encode_u_64(apiObj.spendableOnchainBalanceSats);
    wireObj.total_lightning_balance_sats =
        cst_encode_u_64(apiObj.totalLightningBalanceSats);
    wireObj.lightning_balances =
        cst_encode_list_lightning_balance(apiObj.lightningBalances);
    wireObj.pending_balances_from_channel_closures =
        cst_encode_list_pending_sweep_balance(
            apiObj.pendingBalancesFromChannelClosures);
  }

  @protected
  void cst_api_fill_to_wire_best_block(
      BestBlock apiObj, wire_cst_best_block wireObj) {
    wireObj.block_hash = cst_encode_String(apiObj.blockHash);
    wireObj.height = cst_encode_u_32(apiObj.height);
  }

  @protected
  void cst_api_fill_to_wire_bolt_11_invoice(
      Bolt11Invoice apiObj, wire_cst_bolt_11_invoice wireObj) {
    wireObj.signed_raw_invoice = cst_encode_String(apiObj.signedRawInvoice);
  }

  @protected
  void cst_api_fill_to_wire_bolt_12_invoice(
      Bolt12Invoice apiObj, wire_cst_bolt_12_invoice wireObj) {
    wireObj.data = cst_encode_list_prim_u_8_strict(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_bolt_12_parse_error(
      Bolt12ParseError apiObj, wire_cst_bolt_12_parse_error wireObj) {
    if (apiObj is Bolt12ParseError_InvalidContinuation) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Bolt12ParseError_InvalidBech32Hrp) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is Bolt12ParseError_Bech32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.Bech32.field0 = pre_field0;
      return;
    }
    if (apiObj is Bolt12ParseError_Decode) {
      var pre_field0 = cst_encode_box_autoadd_decode_error(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind.Decode.field0 = pre_field0;
      return;
    }
    if (apiObj is Bolt12ParseError_InvalidSemantics) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidSemantics.field0 = pre_field0;
      return;
    }
    if (apiObj is Bolt12ParseError_InvalidSignature) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.InvalidSignature.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address(
      Address apiObj, ffi.Pointer<wire_cst_address> wireObj) {
    cst_api_fill_to_wire_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_anchor_channels_config(
      AnchorChannelsConfig apiObj,
      ffi.Pointer<wire_cst_anchor_channels_config> wireObj) {
    cst_api_fill_to_wire_anchor_channels_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bolt_11_invoice(
      Bolt11Invoice apiObj, ffi.Pointer<wire_cst_bolt_11_invoice> wireObj) {
    cst_api_fill_to_wire_bolt_11_invoice(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bolt_12_parse_error(
      Bolt12ParseError apiObj,
      ffi.Pointer<wire_cst_bolt_12_parse_error> wireObj) {
    cst_api_fill_to_wire_bolt_12_parse_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig apiObj,
      ffi.Pointer<wire_cst_chain_data_source_config> wireObj) {
    cst_api_fill_to_wire_chain_data_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_config(
      ChannelConfig apiObj, ffi.Pointer<wire_cst_channel_config> wireObj) {
    cst_api_fill_to_wire_channel_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_id(
      ChannelId apiObj, ffi.Pointer<wire_cst_channel_id> wireObj) {
    cst_api_fill_to_wire_channel_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_info(
      ChannelInfo apiObj, ffi.Pointer<wire_cst_channel_info> wireObj) {
    cst_api_fill_to_wire_channel_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_channel_update_info(
      ChannelUpdateInfo apiObj,
      ffi.Pointer<wire_cst_channel_update_info> wireObj) {
    cst_api_fill_to_wire_channel_update_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_closure_reason(
      ClosureReason apiObj, ffi.Pointer<wire_cst_closure_reason> wireObj) {
    cst_api_fill_to_wire_closure_reason(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_cst_config> wireObj) {
    cst_api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_decode_error(
      DecodeError apiObj, ffi.Pointer<wire_cst_decode_error> wireObj) {
    cst_api_fill_to_wire_decode_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_entropy_source_config(
      EntropySourceConfig apiObj,
      ffi.Pointer<wire_cst_entropy_source_config> wireObj) {
    cst_api_fill_to_wire_entropy_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_esplora_sync_config(
      EsploraSyncConfig apiObj,
      ffi.Pointer<wire_cst_esplora_sync_config> wireObj) {
    cst_api_fill_to_wire_esplora_sync_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_event(
      Event apiObj, ffi.Pointer<wire_cst_event> wireObj) {
    cst_api_fill_to_wire_event(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_bolt_11_payment(
      FfiBolt11Payment apiObj,
      ffi.Pointer<wire_cst_ffi_bolt_11_payment> wireObj) {
    cst_api_fill_to_wire_ffi_bolt_11_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_bolt_12_payment(
      FfiBolt12Payment apiObj,
      ffi.Pointer<wire_cst_ffi_bolt_12_payment> wireObj) {
    cst_api_fill_to_wire_ffi_bolt_12_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_mnemonic(
      FfiMnemonic apiObj, ffi.Pointer<wire_cst_ffi_mnemonic> wireObj) {
    cst_api_fill_to_wire_ffi_mnemonic(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_network_graph(
      FfiNetworkGraph apiObj, ffi.Pointer<wire_cst_ffi_network_graph> wireObj) {
    cst_api_fill_to_wire_ffi_network_graph(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_node(
      FfiNode apiObj, ffi.Pointer<wire_cst_ffi_node> wireObj) {
    cst_api_fill_to_wire_ffi_node(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_on_chain_payment(
      FfiOnChainPayment apiObj,
      ffi.Pointer<wire_cst_ffi_on_chain_payment> wireObj) {
    cst_api_fill_to_wire_ffi_on_chain_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_spontaneous_payment(
      FfiSpontaneousPayment apiObj,
      ffi.Pointer<wire_cst_ffi_spontaneous_payment> wireObj) {
    cst_api_fill_to_wire_ffi_spontaneous_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_unified_qr_payment(
      FfiUnifiedQrPayment apiObj,
      ffi.Pointer<wire_cst_ffi_unified_qr_payment> wireObj) {
    cst_api_fill_to_wire_ffi_unified_qr_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_gossip_source_config(
      GossipSourceConfig apiObj,
      ffi.Pointer<wire_cst_gossip_source_config> wireObj) {
    cst_api_fill_to_wire_gossip_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig apiObj,
      ffi.Pointer<wire_cst_liquidity_source_config> wireObj) {
    cst_api_fill_to_wire_liquidity_source_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lsp_fee_limits(
      LSPFeeLimits apiObj, ffi.Pointer<wire_cst_lsp_fee_limits> wireObj) {
    cst_api_fill_to_wire_lsp_fee_limits(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_max_total_routing_fee_limit(
      MaxTotalRoutingFeeLimit apiObj,
      ffi.Pointer<wire_cst_max_total_routing_fee_limit> wireObj) {
    cst_api_fill_to_wire_max_total_routing_fee_limit(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_alias(
      NodeAlias apiObj, ffi.Pointer<wire_cst_node_alias> wireObj) {
    cst_api_fill_to_wire_node_alias(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_announcement_info(
      NodeAnnouncementInfo apiObj,
      ffi.Pointer<wire_cst_node_announcement_info> wireObj) {
    cst_api_fill_to_wire_node_announcement_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_id(
      NodeId apiObj, ffi.Pointer<wire_cst_node_id> wireObj) {
    cst_api_fill_to_wire_node_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_info(
      NodeInfo apiObj, ffi.Pointer<wire_cst_node_info> wireObj) {
    cst_api_fill_to_wire_node_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_offer(
      Offer apiObj, ffi.Pointer<wire_cst_offer> wireObj) {
    cst_api_fill_to_wire_offer(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_offer_id(
      OfferId apiObj, ffi.Pointer<wire_cst_offer_id> wireObj) {
    cst_api_fill_to_wire_offer_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_out_point(
      OutPoint apiObj, ffi.Pointer<wire_cst_out_point> wireObj) {
    cst_api_fill_to_wire_out_point(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_details(
      PaymentDetails apiObj, ffi.Pointer<wire_cst_payment_details> wireObj) {
    cst_api_fill_to_wire_payment_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_hash(
      PaymentHash apiObj, ffi.Pointer<wire_cst_payment_hash> wireObj) {
    cst_api_fill_to_wire_payment_hash(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_id(
      PaymentId apiObj, ffi.Pointer<wire_cst_payment_id> wireObj) {
    cst_api_fill_to_wire_payment_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_preimage(
      PaymentPreimage apiObj, ffi.Pointer<wire_cst_payment_preimage> wireObj) {
    cst_api_fill_to_wire_payment_preimage(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_secret(
      PaymentSecret apiObj, ffi.Pointer<wire_cst_payment_secret> wireObj) {
    cst_api_fill_to_wire_payment_secret(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_public_key(
      PublicKey apiObj, ffi.Pointer<wire_cst_public_key> wireObj) {
    cst_api_fill_to_wire_public_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_refund(
      Refund apiObj, ffi.Pointer<wire_cst_refund> wireObj) {
    cst_api_fill_to_wire_refund(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sending_parameters(
      SendingParameters apiObj,
      ffi.Pointer<wire_cst_sending_parameters> wireObj) {
    cst_api_fill_to_wire_sending_parameters(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_socket_address(
      SocketAddress apiObj, ffi.Pointer<wire_cst_socket_address> wireObj) {
    cst_api_fill_to_wire_socket_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_txid(
      Txid apiObj, ffi.Pointer<wire_cst_txid> wireObj) {
    cst_api_fill_to_wire_txid(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_user_channel_id(
      UserChannelId apiObj, ffi.Pointer<wire_cst_user_channel_id> wireObj) {
    cst_api_fill_to_wire_user_channel_id(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_chain_data_source_config(
      ChainDataSourceConfig apiObj, wire_cst_chain_data_source_config wireObj) {
    if (apiObj is ChainDataSourceConfig_Esplora) {
      var pre_server_url = cst_encode_String(apiObj.serverUrl);
      var pre_sync_config =
          cst_encode_opt_box_autoadd_esplora_sync_config(apiObj.syncConfig);
      wireObj.tag = 0;
      wireObj.kind.Esplora.server_url = pre_server_url;
      wireObj.kind.Esplora.sync_config = pre_sync_config;
      return;
    }
    if (apiObj is ChainDataSourceConfig_BitcoindRpc) {
      var pre_rpc_host = cst_encode_String(apiObj.rpcHost);
      var pre_rpc_port = cst_encode_u_16(apiObj.rpcPort);
      var pre_rpc_user = cst_encode_String(apiObj.rpcUser);
      var pre_rpc_password = cst_encode_String(apiObj.rpcPassword);
      wireObj.tag = 1;
      wireObj.kind.BitcoindRpc.rpc_host = pre_rpc_host;
      wireObj.kind.BitcoindRpc.rpc_port = pre_rpc_port;
      wireObj.kind.BitcoindRpc.rpc_user = pre_rpc_user;
      wireObj.kind.BitcoindRpc.rpc_password = pre_rpc_password;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_channel_config(
      ChannelConfig apiObj, wire_cst_channel_config wireObj) {
    wireObj.forwarding_fee_proportional_millionths =
        cst_encode_u_32(apiObj.forwardingFeeProportionalMillionths);
    wireObj.forwarding_fee_base_msat =
        cst_encode_u_32(apiObj.forwardingFeeBaseMsat);
    wireObj.cltv_expiry_delta = cst_encode_u_16(apiObj.cltvExpiryDelta);
    cst_api_fill_to_wire_max_dust_htlc_exposure(
        apiObj.maxDustHtlcExposure, wireObj.max_dust_htlc_exposure);
    wireObj.force_close_avoidance_max_fee_satoshis =
        cst_encode_u_64(apiObj.forceCloseAvoidanceMaxFeeSatoshis);
    wireObj.accept_underpaying_htlcs =
        cst_encode_bool(apiObj.acceptUnderpayingHtlcs);
  }

  @protected
  void cst_api_fill_to_wire_channel_details(
      ChannelDetails apiObj, wire_cst_channel_details wireObj) {
    cst_api_fill_to_wire_channel_id(apiObj.channelId, wireObj.channel_id);
    cst_api_fill_to_wire_public_key(
        apiObj.counterpartyNodeId, wireObj.counterparty_node_id);
    wireObj.funding_txo =
        cst_encode_opt_box_autoadd_out_point(apiObj.fundingTxo);
    wireObj.channel_value_sats = cst_encode_u_64(apiObj.channelValueSats);
    wireObj.unspendable_punishment_reserve =
        cst_encode_opt_box_autoadd_u_64(apiObj.unspendablePunishmentReserve);
    cst_api_fill_to_wire_user_channel_id(
        apiObj.userChannelId, wireObj.user_channel_id);
    wireObj.feerate_sat_per_1000_weight =
        cst_encode_u_32(apiObj.feerateSatPer1000Weight);
    wireObj.outbound_capacity_msat =
        cst_encode_u_64(apiObj.outboundCapacityMsat);
    wireObj.inbound_capacity_msat = cst_encode_u_64(apiObj.inboundCapacityMsat);
    wireObj.confirmations_required =
        cst_encode_opt_box_autoadd_u_32(apiObj.confirmationsRequired);
    wireObj.confirmations =
        cst_encode_opt_box_autoadd_u_32(apiObj.confirmations);
    wireObj.is_outbound = cst_encode_bool(apiObj.isOutbound);
    wireObj.is_channel_ready = cst_encode_bool(apiObj.isChannelReady);
    wireObj.is_usable = cst_encode_bool(apiObj.isUsable);
    wireObj.cltv_expiry_delta =
        cst_encode_opt_box_autoadd_u_16(apiObj.cltvExpiryDelta);
    wireObj.counterparty_unspendable_punishment_reserve =
        cst_encode_u_64(apiObj.counterpartyUnspendablePunishmentReserve);
    wireObj.counterparty_outbound_htlc_minimum_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.counterpartyOutboundHtlcMinimumMsat);
    wireObj.counterparty_outbound_htlc_maximum_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.counterpartyOutboundHtlcMaximumMsat);
    wireObj.counterparty_forwarding_info_fee_base_msat =
        cst_encode_opt_box_autoadd_u_32(
            apiObj.counterpartyForwardingInfoFeeBaseMsat);
    wireObj.counterparty_forwarding_info_fee_proportional_millionths =
        cst_encode_opt_box_autoadd_u_32(
            apiObj.counterpartyForwardingInfoFeeProportionalMillionths);
    wireObj.counterparty_forwarding_info_cltv_expiry_delta =
        cst_encode_opt_box_autoadd_u_16(
            apiObj.counterpartyForwardingInfoCltvExpiryDelta);
    wireObj.next_outbound_htlc_limit_msat =
        cst_encode_u_64(apiObj.nextOutboundHtlcLimitMsat);
    wireObj.next_outbound_htlc_minimum_msat =
        cst_encode_u_64(apiObj.nextOutboundHtlcMinimumMsat);
    wireObj.force_close_spend_delay =
        cst_encode_opt_box_autoadd_u_16(apiObj.forceCloseSpendDelay);
    wireObj.inbound_htlc_minimum_msat =
        cst_encode_u_64(apiObj.inboundHtlcMinimumMsat);
    wireObj.inbound_htlc_maximum_msat =
        cst_encode_opt_box_autoadd_u_64(apiObj.inboundHtlcMaximumMsat);
    cst_api_fill_to_wire_channel_config(apiObj.config, wireObj.config);
  }

  @protected
  void cst_api_fill_to_wire_channel_id(
      ChannelId apiObj, wire_cst_channel_id wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_channel_info(
      ChannelInfo apiObj, wire_cst_channel_info wireObj) {
    cst_api_fill_to_wire_node_id(apiObj.nodeOne, wireObj.node_one);
    wireObj.one_to_two =
        cst_encode_opt_box_autoadd_channel_update_info(apiObj.oneToTwo);
    cst_api_fill_to_wire_node_id(apiObj.nodeTwo, wireObj.node_two);
    wireObj.two_to_one =
        cst_encode_opt_box_autoadd_channel_update_info(apiObj.twoToOne);
    wireObj.capacity_sats =
        cst_encode_opt_box_autoadd_u_64(apiObj.capacitySats);
  }

  @protected
  void cst_api_fill_to_wire_channel_update_info(
      ChannelUpdateInfo apiObj, wire_cst_channel_update_info wireObj) {
    wireObj.last_update = cst_encode_u_32(apiObj.lastUpdate);
    wireObj.enabled = cst_encode_bool(apiObj.enabled);
    wireObj.cltv_expiry_delta = cst_encode_u_16(apiObj.cltvExpiryDelta);
    wireObj.htlc_minimum_msat = cst_encode_u_64(apiObj.htlcMinimumMsat);
    wireObj.htlc_maximum_msat = cst_encode_u_64(apiObj.htlcMaximumMsat);
    cst_api_fill_to_wire_routing_fees(apiObj.fees, wireObj.fees);
  }

  @protected
  void cst_api_fill_to_wire_closure_reason(
      ClosureReason apiObj, wire_cst_closure_reason wireObj) {
    if (apiObj is ClosureReason_PeerFeerateTooLow) {
      var pre_peer_feerate_sat_per_kw =
          cst_encode_u_32(apiObj.peerFeerateSatPerKw);
      var pre_required_feerate_sat_per_kw =
          cst_encode_u_32(apiObj.requiredFeerateSatPerKw);
      wireObj.tag = 0;
      wireObj.kind.PeerFeerateTooLow.peer_feerate_sat_per_kw =
          pre_peer_feerate_sat_per_kw;
      wireObj.kind.PeerFeerateTooLow.required_feerate_sat_per_kw =
          pre_required_feerate_sat_per_kw;
      return;
    }
    if (apiObj is ClosureReason_CounterpartyForceClosed) {
      var pre_peer_msg = cst_encode_String(apiObj.peerMsg);
      wireObj.tag = 1;
      wireObj.kind.CounterpartyForceClosed.peer_msg = pre_peer_msg;
      return;
    }
    if (apiObj is ClosureReason_HolderForceClosed) {
      var pre_broadcasted_latest_txn =
          cst_encode_opt_box_autoadd_bool(apiObj.broadcastedLatestTxn);
      wireObj.tag = 2;
      wireObj.kind.HolderForceClosed.broadcasted_latest_txn =
          pre_broadcasted_latest_txn;
      return;
    }
    if (apiObj is ClosureReason_LegacyCooperativeClosure) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is ClosureReason_CounterpartyInitiatedCooperativeClosure) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is ClosureReason_LocallyInitiatedCooperativeClosure) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is ClosureReason_CommitmentTxConfirmed) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is ClosureReason_FundingTimedOut) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is ClosureReason_ProcessingError) {
      var pre_err = cst_encode_String(apiObj.err);
      wireObj.tag = 8;
      wireObj.kind.ProcessingError.err = pre_err;
      return;
    }
    if (apiObj is ClosureReason_DisconnectedPeer) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is ClosureReason_OutdatedChannelManager) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is ClosureReason_CounterpartyCoopClosedUnfundedChannel) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is ClosureReason_FundingBatchClosure) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is ClosureReason_HTLCsTimedOut) {
      wireObj.tag = 13;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_config(Config apiObj, wire_cst_config wireObj) {
    wireObj.storage_dir_path = cst_encode_String(apiObj.storageDirPath);
    wireObj.log_dir_path = cst_encode_opt_String(apiObj.logDirPath);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.listening_addresses =
        cst_encode_opt_list_socket_address(apiObj.listeningAddresses);
    wireObj.node_alias =
        cst_encode_opt_box_autoadd_node_alias(apiObj.nodeAlias);
    wireObj.trusted_peers_0conf =
        cst_encode_list_public_key(apiObj.trustedPeers0Conf);
    wireObj.probing_liquidity_limit_multiplier =
        cst_encode_u_64(apiObj.probingLiquidityLimitMultiplier);
    wireObj.log_level = cst_encode_log_level(apiObj.logLevel);
    wireObj.anchor_channels_config =
        cst_encode_opt_box_autoadd_anchor_channels_config(
            apiObj.anchorChannelsConfig);
    wireObj.sending_parameters =
        cst_encode_opt_box_autoadd_sending_parameters(apiObj.sendingParameters);
  }

  @protected
  void cst_api_fill_to_wire_decode_error(
      DecodeError apiObj, wire_cst_decode_error wireObj) {
    if (apiObj is DecodeError_UnknownVersion) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DecodeError_UnknownRequiredFeature) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DecodeError_InvalidValue) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DecodeError_ShortRead) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DecodeError_BadLengthDescriptor) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DecodeError_Io) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.Io.field0 = pre_field0;
      return;
    }
    if (apiObj is DecodeError_UnsupportedCompression) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DecodeError_DangerousValue) {
      wireObj.tag = 7;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_entropy_source_config(
      EntropySourceConfig apiObj, wire_cst_entropy_source_config wireObj) {
    if (apiObj is EntropySourceConfig_SeedFile) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.SeedFile.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_SeedBytes) {
      var pre_field0 = cst_encode_u_8_array_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.SeedBytes.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_Bip39Mnemonic) {
      var pre_mnemonic = cst_encode_box_autoadd_ffi_mnemonic(apiObj.mnemonic);
      var pre_passphrase = cst_encode_opt_String(apiObj.passphrase);
      wireObj.tag = 2;
      wireObj.kind.Bip39Mnemonic.mnemonic = pre_mnemonic;
      wireObj.kind.Bip39Mnemonic.passphrase = pre_passphrase;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_esplora_sync_config(
      EsploraSyncConfig apiObj, wire_cst_esplora_sync_config wireObj) {
    wireObj.onchain_wallet_sync_interval_secs =
        cst_encode_u_64(apiObj.onchainWalletSyncIntervalSecs);
    wireObj.lightning_wallet_sync_interval_secs =
        cst_encode_u_64(apiObj.lightningWalletSyncIntervalSecs);
    wireObj.fee_rate_cache_update_interval_secs =
        cst_encode_u_64(apiObj.feeRateCacheUpdateIntervalSecs);
  }

  @protected
  void cst_api_fill_to_wire_event(Event apiObj, wire_cst_event wireObj) {
    if (apiObj is Event_PaymentClaimable) {
      var pre_payment_id = cst_encode_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_claimable_amount_msat =
          cst_encode_u_64(apiObj.claimableAmountMsat);
      var pre_claim_deadline =
          cst_encode_opt_box_autoadd_u_32(apiObj.claimDeadline);
      wireObj.tag = 0;
      wireObj.kind.PaymentClaimable.payment_id = pre_payment_id;
      wireObj.kind.PaymentClaimable.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentClaimable.claimable_amount_msat =
          pre_claimable_amount_msat;
      wireObj.kind.PaymentClaimable.claim_deadline = pre_claim_deadline;
      return;
    }
    if (apiObj is Event_PaymentSuccessful) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_fee_paid_msat =
          cst_encode_opt_box_autoadd_u_64(apiObj.feePaidMsat);
      wireObj.tag = 1;
      wireObj.kind.PaymentSuccessful.payment_id = pre_payment_id;
      wireObj.kind.PaymentSuccessful.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentSuccessful.fee_paid_msat = pre_fee_paid_msat;
      return;
    }
    if (apiObj is Event_PaymentFailed) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_opt_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_reason =
          cst_encode_opt_box_autoadd_payment_failure_reason(apiObj.reason);
      wireObj.tag = 2;
      wireObj.kind.PaymentFailed.payment_id = pre_payment_id;
      wireObj.kind.PaymentFailed.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentFailed.reason = pre_reason;
      return;
    }
    if (apiObj is Event_PaymentReceived) {
      var pre_payment_id =
          cst_encode_opt_box_autoadd_payment_id(apiObj.paymentId);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_amount_msat = cst_encode_u_64(apiObj.amountMsat);
      wireObj.tag = 3;
      wireObj.kind.PaymentReceived.payment_id = pre_payment_id;
      wireObj.kind.PaymentReceived.payment_hash = pre_payment_hash;
      wireObj.kind.PaymentReceived.amount_msat = pre_amount_msat;
      return;
    }
    if (apiObj is Event_ChannelPending) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_former_temporary_channel_id =
          cst_encode_box_autoadd_channel_id(apiObj.formerTemporaryChannelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_funding_txo = cst_encode_box_autoadd_out_point(apiObj.fundingTxo);
      wireObj.tag = 4;
      wireObj.kind.ChannelPending.channel_id = pre_channel_id;
      wireObj.kind.ChannelPending.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelPending.former_temporary_channel_id =
          pre_former_temporary_channel_id;
      wireObj.kind.ChannelPending.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ChannelPending.funding_txo = pre_funding_txo;
      return;
    }
    if (apiObj is Event_ChannelReady) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_counterparty_node_id =
          cst_encode_opt_box_autoadd_public_key(apiObj.counterpartyNodeId);
      wireObj.tag = 5;
      wireObj.kind.ChannelReady.channel_id = pre_channel_id;
      wireObj.kind.ChannelReady.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelReady.counterparty_node_id = pre_counterparty_node_id;
      return;
    }
    if (apiObj is Event_ChannelClosed) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_user_channel_id =
          cst_encode_box_autoadd_user_channel_id(apiObj.userChannelId);
      var pre_counterparty_node_id =
          cst_encode_opt_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_reason = cst_encode_opt_box_autoadd_closure_reason(apiObj.reason);
      wireObj.tag = 6;
      wireObj.kind.ChannelClosed.channel_id = pre_channel_id;
      wireObj.kind.ChannelClosed.user_channel_id = pre_user_channel_id;
      wireObj.kind.ChannelClosed.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ChannelClosed.reason = pre_reason;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ffi_bolt_11_payment(
      FfiBolt11Payment apiObj, wire_cst_ffi_bolt_11_payment wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodepaymentBolt11Payment(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_bolt_12_payment(
      FfiBolt12Payment apiObj, wire_cst_ffi_bolt_12_payment wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodepaymentBolt12Payment(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_mnemonic(
      FfiMnemonic apiObj, wire_cst_ffi_mnemonic wireObj) {
    wireObj.seed_phrase = cst_encode_String(apiObj.seedPhrase);
  }

  @protected
  void cst_api_fill_to_wire_ffi_network_graph(
      FfiNetworkGraph apiObj, wire_cst_ffi_network_graph wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodegraphNetworkGraph(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_node(
      FfiNode apiObj, wire_cst_ffi_node wireObj) {
    wireObj.opaque = cst_encode_RustOpaque_ldk_nodeNode(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_node_error(
      FfiNodeError apiObj, wire_cst_ffi_node_error wireObj) {
    if (apiObj is FfiNodeError_InvalidTxid) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is FfiNodeError_AlreadyRunning) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is FfiNodeError_NotRunning) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is FfiNodeError_OnchainTxCreationFailed) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is FfiNodeError_ConnectionFailed) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is FfiNodeError_InvoiceCreationFailed) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is FfiNodeError_PaymentSendingFailed) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is FfiNodeError_ProbeSendingFailed) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is FfiNodeError_ChannelCreationFailed) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is FfiNodeError_ChannelClosingFailed) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is FfiNodeError_ChannelConfigUpdateFailed) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is FfiNodeError_PersistenceFailed) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is FfiNodeError_WalletOperationFailed) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is FfiNodeError_OnchainTxSigningFailed) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is FfiNodeError_MessageSigningFailed) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is FfiNodeError_TxSyncFailed) {
      wireObj.tag = 15;
      return;
    }
    if (apiObj is FfiNodeError_GossipUpdateFailed) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is FfiNodeError_InvalidAddress) {
      wireObj.tag = 17;
      return;
    }
    if (apiObj is FfiNodeError_InvalidSocketAddress) {
      wireObj.tag = 18;
      return;
    }
    if (apiObj is FfiNodeError_InvalidPublicKey) {
      wireObj.tag = 19;
      return;
    }
    if (apiObj is FfiNodeError_InvalidSecretKey) {
      wireObj.tag = 20;
      return;
    }
    if (apiObj is FfiNodeError_InvalidPaymentHash) {
      wireObj.tag = 21;
      return;
    }
    if (apiObj is FfiNodeError_InvalidPaymentPreimage) {
      wireObj.tag = 22;
      return;
    }
    if (apiObj is FfiNodeError_InvalidPaymentSecret) {
      wireObj.tag = 23;
      return;
    }
    if (apiObj is FfiNodeError_InvalidAmount) {
      wireObj.tag = 24;
      return;
    }
    if (apiObj is FfiNodeError_InvalidInvoice) {
      wireObj.tag = 25;
      return;
    }
    if (apiObj is FfiNodeError_InvalidChannelId) {
      wireObj.tag = 26;
      return;
    }
    if (apiObj is FfiNodeError_InvalidNetwork) {
      wireObj.tag = 27;
      return;
    }
    if (apiObj is FfiNodeError_DuplicatePayment) {
      wireObj.tag = 28;
      return;
    }
    if (apiObj is FfiNodeError_InsufficientFunds) {
      wireObj.tag = 29;
      return;
    }
    if (apiObj is FfiNodeError_FeerateEstimationUpdateFailed) {
      wireObj.tag = 30;
      return;
    }
    if (apiObj is FfiNodeError_LiquidityRequestFailed) {
      wireObj.tag = 31;
      return;
    }
    if (apiObj is FfiNodeError_LiquiditySourceUnavailable) {
      wireObj.tag = 32;
      return;
    }
    if (apiObj is FfiNodeError_LiquidityFeeTooHigh) {
      wireObj.tag = 33;
      return;
    }
    if (apiObj is FfiNodeError_InvalidPaymentId) {
      wireObj.tag = 34;
      return;
    }
    if (apiObj is FfiNodeError_Decode) {
      var pre_field0 = cst_encode_box_autoadd_decode_error(apiObj.field0);
      wireObj.tag = 35;
      wireObj.kind.Decode.field0 = pre_field0;
      return;
    }
    if (apiObj is FfiNodeError_Bolt12Parse) {
      var pre_field0 =
          cst_encode_box_autoadd_bolt_12_parse_error(apiObj.field0);
      wireObj.tag = 36;
      wireObj.kind.Bolt12Parse.field0 = pre_field0;
      return;
    }
    if (apiObj is FfiNodeError_InvoiceRequestCreationFailed) {
      wireObj.tag = 37;
      return;
    }
    if (apiObj is FfiNodeError_OfferCreationFailed) {
      wireObj.tag = 38;
      return;
    }
    if (apiObj is FfiNodeError_RefundCreationFailed) {
      wireObj.tag = 39;
      return;
    }
    if (apiObj is FfiNodeError_FeerateEstimationUpdateTimeout) {
      wireObj.tag = 40;
      return;
    }
    if (apiObj is FfiNodeError_WalletOperationTimeout) {
      wireObj.tag = 41;
      return;
    }
    if (apiObj is FfiNodeError_TxSyncTimeout) {
      wireObj.tag = 42;
      return;
    }
    if (apiObj is FfiNodeError_GossipUpdateTimeout) {
      wireObj.tag = 43;
      return;
    }
    if (apiObj is FfiNodeError_InvalidOfferId) {
      wireObj.tag = 44;
      return;
    }
    if (apiObj is FfiNodeError_InvalidNodeId) {
      wireObj.tag = 45;
      return;
    }
    if (apiObj is FfiNodeError_InvalidOffer) {
      wireObj.tag = 46;
      return;
    }
    if (apiObj is FfiNodeError_InvalidRefund) {
      wireObj.tag = 47;
      return;
    }
    if (apiObj is FfiNodeError_UnsupportedCurrency) {
      wireObj.tag = 48;
      return;
    }
    if (apiObj is FfiNodeError_UriParameterParsingFailed) {
      wireObj.tag = 49;
      return;
    }
    if (apiObj is FfiNodeError_InvalidUri) {
      wireObj.tag = 50;
      return;
    }
    if (apiObj is FfiNodeError_InvalidQuantity) {
      wireObj.tag = 51;
      return;
    }
    if (apiObj is FfiNodeError_InvalidNodeAlias) {
      wireObj.tag = 52;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ffi_on_chain_payment(
      FfiOnChainPayment apiObj, wire_cst_ffi_on_chain_payment wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodepaymentOnchainPayment(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_spontaneous_payment(
      FfiSpontaneousPayment apiObj, wire_cst_ffi_spontaneous_payment wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_unified_qr_payment(
      FfiUnifiedQrPayment apiObj, wire_cst_ffi_unified_qr_payment wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_ldk_nodepaymentUnifiedQrPayment(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_gossip_source_config(
      GossipSourceConfig apiObj, wire_cst_gossip_source_config wireObj) {
    if (apiObj is GossipSourceConfig_P2PNetwork) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is GossipSourceConfig_RapidGossipSync) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.RapidGossipSync.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_lightning_balance(
      LightningBalance apiObj, wire_cst_lightning_balance wireObj) {
    if (apiObj is LightningBalance_ClaimableOnChannelClose) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_transaction_fee_satoshis =
          cst_encode_u_64(apiObj.transactionFeeSatoshis);
      var pre_outbound_payment_htlc_rounded_msat =
          cst_encode_u_64(apiObj.outboundPaymentHtlcRoundedMsat);
      var pre_outbound_forwarded_htlc_rounded_msat =
          cst_encode_u_64(apiObj.outboundForwardedHtlcRoundedMsat);
      var pre_inbound_claiming_htlc_rounded_msat =
          cst_encode_u_64(apiObj.inboundClaimingHtlcRoundedMsat);
      var pre_inbound_htlc_rounded_msat =
          cst_encode_u_64(apiObj.inboundHtlcRoundedMsat);
      wireObj.tag = 0;
      wireObj.kind.ClaimableOnChannelClose.channel_id = pre_channel_id;
      wireObj.kind.ClaimableOnChannelClose.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ClaimableOnChannelClose.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.ClaimableOnChannelClose.transaction_fee_satoshis =
          pre_transaction_fee_satoshis;
      wireObj.kind.ClaimableOnChannelClose.outbound_payment_htlc_rounded_msat =
          pre_outbound_payment_htlc_rounded_msat;
      wireObj.kind.ClaimableOnChannelClose
              .outbound_forwarded_htlc_rounded_msat =
          pre_outbound_forwarded_htlc_rounded_msat;
      wireObj.kind.ClaimableOnChannelClose.inbound_claiming_htlc_rounded_msat =
          pre_inbound_claiming_htlc_rounded_msat;
      wireObj.kind.ClaimableOnChannelClose.inbound_htlc_rounded_msat =
          pre_inbound_htlc_rounded_msat;
      return;
    }
    if (apiObj is LightningBalance_ClaimableAwaitingConfirmations) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_confirmation_height = cst_encode_u_32(apiObj.confirmationHeight);
      var pre_source = cst_encode_balance_source(apiObj.source);
      wireObj.tag = 1;
      wireObj.kind.ClaimableAwaitingConfirmations.channel_id = pre_channel_id;
      wireObj.kind.ClaimableAwaitingConfirmations.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ClaimableAwaitingConfirmations.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.ClaimableAwaitingConfirmations.confirmation_height =
          pre_confirmation_height;
      wireObj.kind.ClaimableAwaitingConfirmations.source = pre_source;
      return;
    }
    if (apiObj is LightningBalance_ContentiousClaimable) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_timeout_height = cst_encode_u_32(apiObj.timeoutHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_payment_preimage =
          cst_encode_box_autoadd_payment_preimage(apiObj.paymentPreimage);
      wireObj.tag = 2;
      wireObj.kind.ContentiousClaimable.channel_id = pre_channel_id;
      wireObj.kind.ContentiousClaimable.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.ContentiousClaimable.amount_satoshis = pre_amount_satoshis;
      wireObj.kind.ContentiousClaimable.timeout_height = pre_timeout_height;
      wireObj.kind.ContentiousClaimable.payment_hash = pre_payment_hash;
      wireObj.kind.ContentiousClaimable.payment_preimage = pre_payment_preimage;
      return;
    }
    if (apiObj is LightningBalance_MaybeTimeoutClaimableHTLC) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_claimable_height = cst_encode_u_32(apiObj.claimableHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      var pre_outbound_payment = cst_encode_bool(apiObj.outboundPayment);
      wireObj.tag = 3;
      wireObj.kind.MaybeTimeoutClaimableHTLC.channel_id = pre_channel_id;
      wireObj.kind.MaybeTimeoutClaimableHTLC.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.MaybeTimeoutClaimableHTLC.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.MaybeTimeoutClaimableHTLC.claimable_height =
          pre_claimable_height;
      wireObj.kind.MaybeTimeoutClaimableHTLC.payment_hash = pre_payment_hash;
      wireObj.kind.MaybeTimeoutClaimableHTLC.outbound_payment =
          pre_outbound_payment;
      return;
    }
    if (apiObj is LightningBalance_MaybePreimageClaimableHTLC) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      var pre_expiry_height = cst_encode_u_32(apiObj.expiryHeight);
      var pre_payment_hash =
          cst_encode_box_autoadd_payment_hash(apiObj.paymentHash);
      wireObj.tag = 4;
      wireObj.kind.MaybePreimageClaimableHTLC.channel_id = pre_channel_id;
      wireObj.kind.MaybePreimageClaimableHTLC.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.MaybePreimageClaimableHTLC.amount_satoshis =
          pre_amount_satoshis;
      wireObj.kind.MaybePreimageClaimableHTLC.expiry_height = pre_expiry_height;
      wireObj.kind.MaybePreimageClaimableHTLC.payment_hash = pre_payment_hash;
      return;
    }
    if (apiObj is LightningBalance_CounterpartyRevokedOutputClaimable) {
      var pre_channel_id = cst_encode_box_autoadd_channel_id(apiObj.channelId);
      var pre_counterparty_node_id =
          cst_encode_box_autoadd_public_key(apiObj.counterpartyNodeId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 5;
      wireObj.kind.CounterpartyRevokedOutputClaimable.channel_id =
          pre_channel_id;
      wireObj.kind.CounterpartyRevokedOutputClaimable.counterparty_node_id =
          pre_counterparty_node_id;
      wireObj.kind.CounterpartyRevokedOutputClaimable.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_liquidity_source_config(
      LiquiditySourceConfig apiObj, wire_cst_liquidity_source_config wireObj) {
    cst_api_fill_to_wire_record_socket_address_public_key_opt_string(
        apiObj.lsps2Service, wireObj.lsps2_service);
  }

  @protected
  void cst_api_fill_to_wire_lsp_fee_limits(
      LSPFeeLimits apiObj, wire_cst_lsp_fee_limits wireObj) {
    wireObj.max_total_opening_fee_msat =
        cst_encode_opt_box_autoadd_u_64(apiObj.maxTotalOpeningFeeMsat);
    wireObj.max_proportional_opening_fee_ppm_msat =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.maxProportionalOpeningFeePpmMsat);
  }

  @protected
  void cst_api_fill_to_wire_max_dust_htlc_exposure(
      MaxDustHTLCExposure apiObj, wire_cst_max_dust_htlc_exposure wireObj) {
    if (apiObj is MaxDustHTLCExposure_FixedLimitMsat) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.FixedLimitMsat.field0 = pre_field0;
      return;
    }
    if (apiObj is MaxDustHTLCExposure_FeeRateMultiplier) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.FeeRateMultiplier.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_max_total_routing_fee_limit(
      MaxTotalRoutingFeeLimit apiObj,
      wire_cst_max_total_routing_fee_limit wireObj) {
    if (apiObj is MaxTotalRoutingFeeLimit_NoFeeCap) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is MaxTotalRoutingFeeLimit_FeeCap) {
      var pre_amount_msat = cst_encode_u_64(apiObj.amountMsat);
      wireObj.tag = 1;
      wireObj.kind.FeeCap.amount_msat = pre_amount_msat;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_node_alias(
      NodeAlias apiObj, wire_cst_node_alias wireObj) {
    wireObj.field0 = cst_encode_u_8_array_32(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_node_announcement_info(
      NodeAnnouncementInfo apiObj, wire_cst_node_announcement_info wireObj) {
    wireObj.last_update = cst_encode_u_32(apiObj.lastUpdate);
    wireObj.alias = cst_encode_String(apiObj.alias);
    wireObj.addresses = cst_encode_list_socket_address(apiObj.addresses);
  }

  @protected
  void cst_api_fill_to_wire_node_id(NodeId apiObj, wire_cst_node_id wireObj) {
    wireObj.compressed = cst_encode_list_prim_u_8_strict(apiObj.compressed);
  }

  @protected
  void cst_api_fill_to_wire_node_info(
      NodeInfo apiObj, wire_cst_node_info wireObj) {
    wireObj.channels = cst_encode_list_prim_u_64_strict(apiObj.channels);
    wireObj.announcement_info =
        cst_encode_opt_box_autoadd_node_announcement_info(
            apiObj.announcementInfo);
  }

  @protected
  void cst_api_fill_to_wire_node_status(
      NodeStatus apiObj, wire_cst_node_status wireObj) {
    wireObj.is_running = cst_encode_bool(apiObj.isRunning);
    wireObj.is_listening = cst_encode_bool(apiObj.isListening);
    cst_api_fill_to_wire_best_block(
        apiObj.currentBestBlock, wireObj.current_best_block);
    wireObj.latest_lightning_wallet_sync_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestLightningWalletSyncTimestamp);
    wireObj.latest_onchain_wallet_sync_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestOnchainWalletSyncTimestamp);
    wireObj.latest_fee_rate_cache_update_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestFeeRateCacheUpdateTimestamp);
    wireObj.latest_rgs_snapshot_timestamp =
        cst_encode_opt_box_autoadd_u_64(apiObj.latestRgsSnapshotTimestamp);
    wireObj.latest_node_announcement_broadcast_timestamp =
        cst_encode_opt_box_autoadd_u_64(
            apiObj.latestNodeAnnouncementBroadcastTimestamp);
    wireObj.latest_channel_monitor_archival_height =
        cst_encode_opt_box_autoadd_u_32(
            apiObj.latestChannelMonitorArchivalHeight);
  }

  @protected
  void cst_api_fill_to_wire_offer(Offer apiObj, wire_cst_offer wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_offer_id(
      OfferId apiObj, wire_cst_offer_id wireObj) {
    wireObj.field0 = cst_encode_u_8_array_32(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    cst_api_fill_to_wire_txid(apiObj.txid, wireObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_payment_details(
      PaymentDetails apiObj, wire_cst_payment_details wireObj) {
    cst_api_fill_to_wire_payment_id(apiObj.id, wireObj.id);
    cst_api_fill_to_wire_payment_kind(apiObj.kind, wireObj.kind);
    wireObj.amount_msat = cst_encode_opt_box_autoadd_u_64(apiObj.amountMsat);
    wireObj.direction = cst_encode_payment_direction(apiObj.direction);
    wireObj.status = cst_encode_payment_status(apiObj.status);
    wireObj.latest_update_timestamp =
        cst_encode_u_64(apiObj.latestUpdateTimestamp);
  }

  @protected
  void cst_api_fill_to_wire_payment_hash(
      PaymentHash apiObj, wire_cst_payment_hash wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_payment_id(
      PaymentId apiObj, wire_cst_payment_id wireObj) {
    wireObj.field0 = cst_encode_u_8_array_32(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_payment_kind(
      PaymentKind apiObj, wire_cst_payment_kind wireObj) {
    if (apiObj is PaymentKind_Onchain) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is PaymentKind_Bolt11) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      wireObj.tag = 1;
      wireObj.kind.Bolt11.hash = pre_hash;
      wireObj.kind.Bolt11.preimage = pre_preimage;
      wireObj.kind.Bolt11.secret = pre_secret;
      return;
    }
    if (apiObj is PaymentKind_Bolt11Jit) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      var pre_lsp_fee_limits =
          cst_encode_box_autoadd_lsp_fee_limits(apiObj.lspFeeLimits);
      wireObj.tag = 2;
      wireObj.kind.Bolt11Jit.hash = pre_hash;
      wireObj.kind.Bolt11Jit.preimage = pre_preimage;
      wireObj.kind.Bolt11Jit.secret = pre_secret;
      wireObj.kind.Bolt11Jit.lsp_fee_limits = pre_lsp_fee_limits;
      return;
    }
    if (apiObj is PaymentKind_Spontaneous) {
      var pre_hash = cst_encode_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      wireObj.tag = 3;
      wireObj.kind.Spontaneous.hash = pre_hash;
      wireObj.kind.Spontaneous.preimage = pre_preimage;
      return;
    }
    if (apiObj is PaymentKind_Bolt12Offer) {
      var pre_hash = cst_encode_opt_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      var pre_offer_id = cst_encode_box_autoadd_offer_id(apiObj.offerId);
      var pre_payer_note = cst_encode_opt_String(apiObj.payerNote);
      var pre_quantity = cst_encode_opt_box_autoadd_u_64(apiObj.quantity);
      wireObj.tag = 4;
      wireObj.kind.Bolt12Offer.hash = pre_hash;
      wireObj.kind.Bolt12Offer.preimage = pre_preimage;
      wireObj.kind.Bolt12Offer.secret = pre_secret;
      wireObj.kind.Bolt12Offer.offer_id = pre_offer_id;
      wireObj.kind.Bolt12Offer.payer_note = pre_payer_note;
      wireObj.kind.Bolt12Offer.quantity = pre_quantity;
      return;
    }
    if (apiObj is PaymentKind_Bolt12Refund) {
      var pre_hash = cst_encode_opt_box_autoadd_payment_hash(apiObj.hash);
      var pre_preimage =
          cst_encode_opt_box_autoadd_payment_preimage(apiObj.preimage);
      var pre_secret = cst_encode_opt_box_autoadd_payment_secret(apiObj.secret);
      var pre_payer_note = cst_encode_opt_String(apiObj.payerNote);
      var pre_quantity = cst_encode_opt_box_autoadd_u_64(apiObj.quantity);
      wireObj.tag = 5;
      wireObj.kind.Bolt12Refund.hash = pre_hash;
      wireObj.kind.Bolt12Refund.preimage = pre_preimage;
      wireObj.kind.Bolt12Refund.secret = pre_secret;
      wireObj.kind.Bolt12Refund.payer_note = pre_payer_note;
      wireObj.kind.Bolt12Refund.quantity = pre_quantity;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_payment_preimage(
      PaymentPreimage apiObj, wire_cst_payment_preimage wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_payment_secret(
      PaymentSecret apiObj, wire_cst_payment_secret wireObj) {
    wireObj.data = cst_encode_u_8_array_32(apiObj.data);
  }

  @protected
  void cst_api_fill_to_wire_peer_details(
      PeerDetails apiObj, wire_cst_peer_details wireObj) {
    cst_api_fill_to_wire_public_key(apiObj.nodeId, wireObj.node_id);
    cst_api_fill_to_wire_socket_address(apiObj.address, wireObj.address);
    wireObj.is_connected = cst_encode_bool(apiObj.isConnected);
  }

  @protected
  void cst_api_fill_to_wire_pending_sweep_balance(
      PendingSweepBalance apiObj, wire_cst_pending_sweep_balance wireObj) {
    if (apiObj is PendingSweepBalance_PendingBroadcast) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 0;
      wireObj.kind.PendingBroadcast.channel_id = pre_channel_id;
      wireObj.kind.PendingBroadcast.amount_satoshis = pre_amount_satoshis;
      return;
    }
    if (apiObj is PendingSweepBalance_BroadcastAwaitingConfirmation) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_latest_broadcast_height =
          cst_encode_u_32(apiObj.latestBroadcastHeight);
      var pre_latest_spending_txid =
          cst_encode_box_autoadd_txid(apiObj.latestSpendingTxid);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 1;
      wireObj.kind.BroadcastAwaitingConfirmation.channel_id = pre_channel_id;
      wireObj.kind.BroadcastAwaitingConfirmation.latest_broadcast_height =
          pre_latest_broadcast_height;
      wireObj.kind.BroadcastAwaitingConfirmation.latest_spending_txid =
          pre_latest_spending_txid;
      wireObj.kind.BroadcastAwaitingConfirmation.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
    if (apiObj is PendingSweepBalance_AwaitingThresholdConfirmations) {
      var pre_channel_id =
          cst_encode_opt_box_autoadd_channel_id(apiObj.channelId);
      var pre_latest_spending_txid =
          cst_encode_box_autoadd_txid(apiObj.latestSpendingTxid);
      var pre_confirmation_hash = cst_encode_String(apiObj.confirmationHash);
      var pre_confirmation_height = cst_encode_u_32(apiObj.confirmationHeight);
      var pre_amount_satoshis = cst_encode_u_64(apiObj.amountSatoshis);
      wireObj.tag = 2;
      wireObj.kind.AwaitingThresholdConfirmations.channel_id = pre_channel_id;
      wireObj.kind.AwaitingThresholdConfirmations.latest_spending_txid =
          pre_latest_spending_txid;
      wireObj.kind.AwaitingThresholdConfirmations.confirmation_hash =
          pre_confirmation_hash;
      wireObj.kind.AwaitingThresholdConfirmations.confirmation_height =
          pre_confirmation_height;
      wireObj.kind.AwaitingThresholdConfirmations.amount_satoshis =
          pre_amount_satoshis;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_public_key(
      PublicKey apiObj, wire_cst_public_key wireObj) {
    wireObj.hex = cst_encode_String(apiObj.hex);
  }

  @protected
  void cst_api_fill_to_wire_qr_payment_result(
      QrPaymentResult apiObj, wire_cst_qr_payment_result wireObj) {
    if (apiObj is QrPaymentResult_Onchain) {
      var pre_txid = cst_encode_box_autoadd_txid(apiObj.txid);
      wireObj.tag = 0;
      wireObj.kind.Onchain.txid = pre_txid;
      return;
    }
    if (apiObj is QrPaymentResult_Bolt11) {
      var pre_payment_id = cst_encode_box_autoadd_payment_id(apiObj.paymentId);
      wireObj.tag = 1;
      wireObj.kind.Bolt11.payment_id = pre_payment_id;
      return;
    }
    if (apiObj is QrPaymentResult_Bolt12) {
      var pre_payment_id = cst_encode_box_autoadd_payment_id(apiObj.paymentId);
      wireObj.tag = 2;
      wireObj.kind.Bolt12.payment_id = pre_payment_id;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_record_socket_address_public_key_opt_string(
      (SocketAddress, PublicKey, String?) apiObj,
      wire_cst_record_socket_address_public_key_opt_string wireObj) {
    cst_api_fill_to_wire_socket_address(apiObj.$1, wireObj.field0);
    cst_api_fill_to_wire_public_key(apiObj.$2, wireObj.field1);
    wireObj.field2 = cst_encode_opt_String(apiObj.$3);
  }

  @protected
  void cst_api_fill_to_wire_record_string_string(
      (String, String) apiObj, wire_cst_record_string_string wireObj) {
    wireObj.field0 = cst_encode_String(apiObj.$1);
    wireObj.field1 = cst_encode_String(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_refund(Refund apiObj, wire_cst_refund wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_routing_fees(
      RoutingFees apiObj, wire_cst_routing_fees wireObj) {
    wireObj.base_msat = cst_encode_u_32(apiObj.baseMsat);
    wireObj.proportional_millionths =
        cst_encode_u_32(apiObj.proportionalMillionths);
  }

  @protected
  void cst_api_fill_to_wire_sending_parameters(
      SendingParameters apiObj, wire_cst_sending_parameters wireObj) {
    wireObj.max_total_routing_fee_msat =
        cst_encode_opt_box_autoadd_max_total_routing_fee_limit(
            apiObj.maxTotalRoutingFeeMsat);
    wireObj.max_total_cltv_expiry_delta =
        cst_encode_opt_box_autoadd_u_32(apiObj.maxTotalCltvExpiryDelta);
    wireObj.max_path_count =
        cst_encode_opt_box_autoadd_u_8(apiObj.maxPathCount);
    wireObj.max_channel_saturation_power_of_half =
        cst_encode_opt_box_autoadd_u_8(apiObj.maxChannelSaturationPowerOfHalf);
  }

  @protected
  void cst_api_fill_to_wire_socket_address(
      SocketAddress apiObj, wire_cst_socket_address wireObj) {
    if (apiObj is SocketAddress_TcpIpV4) {
      var pre_addr = cst_encode_u_8_array_4(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 0;
      wireObj.kind.TcpIpV4.addr = pre_addr;
      wireObj.kind.TcpIpV4.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_TcpIpV6) {
      var pre_addr = cst_encode_u_8_array_16(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 1;
      wireObj.kind.TcpIpV6.addr = pre_addr;
      wireObj.kind.TcpIpV6.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_OnionV2) {
      var pre_field0 = cst_encode_u_8_array_12(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.OnionV2.field0 = pre_field0;
      return;
    }
    if (apiObj is SocketAddress_OnionV3) {
      var pre_ed25519_pubkey = cst_encode_u_8_array_32(apiObj.ed25519Pubkey);
      var pre_checksum = cst_encode_u_16(apiObj.checksum);
      var pre_version = cst_encode_u_8(apiObj.version);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 3;
      wireObj.kind.OnionV3.ed25519_pubkey = pre_ed25519_pubkey;
      wireObj.kind.OnionV3.checksum = pre_checksum;
      wireObj.kind.OnionV3.version = pre_version;
      wireObj.kind.OnionV3.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_Hostname) {
      var pre_addr = cst_encode_String(apiObj.addr);
      var pre_port = cst_encode_u_16(apiObj.port);
      wireObj.tag = 4;
      wireObj.kind.Hostname.addr = pre_addr;
      wireObj.kind.Hostname.port = pre_port;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_txid(Txid apiObj, wire_cst_txid wireObj) {
    wireObj.hash = cst_encode_String(apiObj.hash);
  }

  @protected
  void cst_api_fill_to_wire_user_channel_id(
      UserChannelId apiObj, wire_cst_user_channel_id wireObj) {
    wireObj.data = cst_encode_list_prim_u_8_strict(apiObj.data);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      FfiBuilder raw);

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      FfiBuilder raw);

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      FfiBuilder raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      FfiBuilder raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodeBuilder(Builder raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodeNode(Node raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodegraphNetworkGraph(NetworkGraph raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentBolt11Payment(Bolt11Payment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentBolt12Payment(Bolt12Payment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentOnchainPayment(OnchainPayment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      SpontaneousPayment raw);

  @protected
  int cst_encode_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      UnifiedQrPayment raw);

  @protected
  int cst_encode_balance_source(BalanceSource raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_ffi_builder_error(FfiBuilderError raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_log_level(LogLevel raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_payment_direction(PaymentDirection raw);

  @protected
  int cst_encode_payment_failure_reason(PaymentFailureReason raw);

  @protected
  int cst_encode_payment_status(PaymentStatus raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          FfiBuilder self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          FfiBuilder self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          FfiBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
          FfiBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodeBuilder(
      Builder self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodeNode(Node self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodegraphNetworkGraph(
      NetworkGraph self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentBolt11Payment(
      Bolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentBolt12Payment(
      Bolt12Payment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentOnchainPayment(
      OnchainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      SpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      UnifiedQrPayment self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_anchor_channels_config(
      AnchorChannelsConfig self, SseSerializer serializer);

  @protected
  void sse_encode_balance_details(
      BalanceDetails self, SseSerializer serializer);

  @protected
  void sse_encode_balance_source(BalanceSource self, SseSerializer serializer);

  @protected
  void sse_encode_best_block(BestBlock self, SseSerializer serializer);

  @protected
  void sse_encode_bolt_11_invoice(Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_bolt_12_invoice(Bolt12Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_bolt_12_parse_error(
      Bolt12ParseError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_anchor_channels_config(
      AnchorChannelsConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bolt_11_invoice(
      Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bolt_12_parse_error(
      Bolt12ParseError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_config(
      ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_id(
      ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_info(
      ChannelInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_update_info(
      ChannelUpdateInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_closure_reason(
      ClosureReason self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_decode_error(
      DecodeError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_esplora_sync_config(
      EsploraSyncConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_bolt_11_payment(
      FfiBolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_bolt_12_payment(
      FfiBolt12Payment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_mnemonic(
      FfiMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_network_graph(
      FfiNetworkGraph self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_node(FfiNode self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_on_chain_payment(
      FfiOnChainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_spontaneous_payment(
      FfiSpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_unified_qr_payment(
      FfiUnifiedQrPayment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lsp_fee_limits(
      LSPFeeLimits self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_max_total_routing_fee_limit(
      MaxTotalRoutingFeeLimit self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_alias(
      NodeAlias self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_announcement_info(
      NodeAnnouncementInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_id(NodeId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_info(
      NodeInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_offer(Offer self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_offer_id(OfferId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_failure_reason(
      PaymentFailureReason self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_hash(
      PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_id(
      PaymentId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_secret(
      PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_public_key(
      PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_refund(Refund self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sending_parameters(
      SendingParameters self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_socket_address(
      SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_txid(Txid self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_user_channel_id(
      UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_config(ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_details(
      ChannelDetails self, SseSerializer serializer);

  @protected
  void sse_encode_channel_id(ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_channel_info(ChannelInfo self, SseSerializer serializer);

  @protected
  void sse_encode_channel_update_info(
      ChannelUpdateInfo self, SseSerializer serializer);

  @protected
  void sse_encode_closure_reason(ClosureReason self, SseSerializer serializer);

  @protected
  void sse_encode_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_decode_error(DecodeError self, SseSerializer serializer);

  @protected
  void sse_encode_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_esplora_sync_config(
      EsploraSyncConfig self, SseSerializer serializer);

  @protected
  void sse_encode_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_bolt_11_payment(
      FfiBolt11Payment self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_bolt_12_payment(
      FfiBolt12Payment self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_builder_error(
      FfiBuilderError self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_mnemonic(FfiMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_network_graph(
      FfiNetworkGraph self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_node(FfiNode self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_node_error(FfiNodeError self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_on_chain_payment(
      FfiOnChainPayment self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_spontaneous_payment(
      FfiSpontaneousPayment self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_unified_qr_payment(
      FfiUnifiedQrPayment self, SseSerializer serializer);

  @protected
  void sse_encode_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_lightning_balance(
      LightningBalance self, SseSerializer serializer);

  @protected
  void sse_encode_liquidity_source_config(
      LiquiditySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_list_channel_details(
      List<ChannelDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_lightning_balance(
      List<LightningBalance> self, SseSerializer serializer);

  @protected
  void sse_encode_list_node_id(List<NodeId> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payment_details(
      List<PaymentDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_peer_details(
      List<PeerDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_pending_sweep_balance(
      List<PendingSweepBalance> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_public_key(
      List<PublicKey> self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_list_socket_address(
      List<SocketAddress> self, SseSerializer serializer);

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer);

  @protected
  void sse_encode_lsp_fee_limits(LSPFeeLimits self, SseSerializer serializer);

  @protected
  void sse_encode_max_dust_htlc_exposure(
      MaxDustHTLCExposure self, SseSerializer serializer);

  @protected
  void sse_encode_max_total_routing_fee_limit(
      MaxTotalRoutingFeeLimit self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_node_alias(NodeAlias self, SseSerializer serializer);

  @protected
  void sse_encode_node_announcement_info(
      NodeAnnouncementInfo self, SseSerializer serializer);

  @protected
  void sse_encode_node_id(NodeId self, SseSerializer serializer);

  @protected
  void sse_encode_node_info(NodeInfo self, SseSerializer serializer);

  @protected
  void sse_encode_node_status(NodeStatus self, SseSerializer serializer);

  @protected
  void sse_encode_offer(Offer self, SseSerializer serializer);

  @protected
  void sse_encode_offer_id(OfferId self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_anchor_channels_config(
      AnchorChannelsConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_config(
      ChannelConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_id(
      ChannelId? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_info(
      ChannelInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_update_info(
      ChannelUpdateInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_closure_reason(
      ClosureReason? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_entropy_source_config(
      EntropySourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_esplora_sync_config(
      EsploraSyncConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_event(Event? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_gossip_source_config(
      GossipSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_liquidity_source_config(
      LiquiditySourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_max_total_routing_fee_limit(
      MaxTotalRoutingFeeLimit? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_node_alias(
      NodeAlias? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_node_announcement_info(
      NodeAnnouncementInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_node_info(
      NodeInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_out_point(
      OutPoint? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_details(
      PaymentDetails? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_failure_reason(
      PaymentFailureReason? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_hash(
      PaymentHash? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_id(
      PaymentId? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_preimage(
      PaymentPreimage? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_secret(
      PaymentSecret? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_public_key(
      PublicKey? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_sending_parameters(
      SendingParameters? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_socket_address(
      List<SocketAddress>? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_payment_direction(
      PaymentDirection self, SseSerializer serializer);

  @protected
  void sse_encode_payment_failure_reason(
      PaymentFailureReason self, SseSerializer serializer);

  @protected
  void sse_encode_payment_hash(PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_payment_id(PaymentId self, SseSerializer serializer);

  @protected
  void sse_encode_payment_kind(PaymentKind self, SseSerializer serializer);

  @protected
  void sse_encode_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_payment_secret(PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer);

  @protected
  void sse_encode_peer_details(PeerDetails self, SseSerializer serializer);

  @protected
  void sse_encode_pending_sweep_balance(
      PendingSweepBalance self, SseSerializer serializer);

  @protected
  void sse_encode_public_key(PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_qr_payment_result(
      QrPaymentResult self, SseSerializer serializer);

  @protected
  void sse_encode_record_socket_address_public_key_opt_string(
      (SocketAddress, PublicKey, String?) self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer);

  @protected
  void sse_encode_refund(Refund self, SseSerializer serializer);

  @protected
  void sse_encode_routing_fees(RoutingFees self, SseSerializer serializer);

  @protected
  void sse_encode_sending_parameters(
      SendingParameters self, SseSerializer serializer);

  @protected
  void sse_encode_socket_address(SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_txid(Txid self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_12(U8Array12 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_channel_id(UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class coreWire implements BaseWire {
  factory coreWire.fromExternalLibrary(ExternalLibrary lib) =>
      coreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  coreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  coreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hash(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_payment_hash> payment_hash,
    int claimable_amount_msat,
    ffi.Pointer<wire_cst_payment_preimage> preimage,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hash(
      port_,
      that,
      payment_hash,
      claimable_amount_msat,
      preimage,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hashPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_payment_hash>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_payment_preimage>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hash');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hash =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_claim_for_hashPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_payment_hash>,
                  int,
                  ffi.Pointer<wire_cst_payment_preimage>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hash(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_payment_hash> payment_hash,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hash(
      port_,
      that,
      payment_hash,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hashPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_payment_hash>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hash');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hash =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_fail_for_hashPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_payment_hash>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_receive(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint32)>>(
      'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_bolt_11_payment>, int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hash(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_payment_hash> payment_hash,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hash(
      port_,
      that,
      payment_hash,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hashPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_payment_hash>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hash');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hash =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_for_hashPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_payment_hash>,
                  int,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount(
      port_,
      that,
      description,
      expiry_secs,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amountPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amountPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void
      wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hash(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
    ffi.Pointer<wire_cst_payment_hash> payment_hash,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hash(
      port_,
      that,
      description,
      expiry_secs,
      payment_hash,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hashPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32,
                      ffi.Pointer<wire_cst_payment_hash>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hash');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hash =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_for_hashPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  ffi.Pointer<wire_cst_payment_hash>)>();

  void
      wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
    ffi.Pointer<ffi.Uint64> max_proportional_lsp_fee_limit_ppm_msat,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channel(
      port_,
      that,
      description,
      expiry_secs,
      max_proportional_lsp_fee_limit_ppm_msat,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channelPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Uint64>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channel');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channel =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_variable_amount_via_jit_channelPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  ffi.Pointer<ffi.Uint64>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    int expiry_secs,
    ffi.Pointer<ffi.Uint64> max_total_lsp_fee_limit_msat,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channel(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
      max_total_lsp_fee_limit_msat,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channelPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Uint64>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channel');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channel =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_receive_via_jit_channelPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  int,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  ffi.Pointer<ffi.Uint64>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
    ffi.Pointer<wire_cst_sending_parameters> sending_parameters,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_send(
      port_,
      that,
      invoice,
      sending_parameters,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_sendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>,
                  ffi.Pointer<wire_cst_sending_parameters>)>>(
      'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_send');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_sendPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>,
              ffi.Pointer<wire_cst_sending_parameters>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes(
      port_,
      that,
      invoice,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_bolt_11_invoice>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
              ffi.Pointer<wire_cst_bolt_11_invoice>)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amount(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
    int amount_msat,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amount(
      port_,
      that,
      invoice,
      amount_msat,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amountPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_bolt_11_invoice>,
                      ffi.Uint64)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amount');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amount =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_send_probes_using_amountPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>, int)>();

  void wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amount(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_11_payment> that,
    ffi.Pointer<wire_cst_bolt_11_invoice> invoice,
    int amount_msat,
    ffi.Pointer<wire_cst_sending_parameters> sending_parameters,
  ) {
    return _wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amount(
      port_,
      that,
      invoice,
      amount_msat,
      sending_parameters,
    );
  }

  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amountPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                      ffi.Pointer<wire_cst_bolt_11_invoice>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_sending_parameters>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amount');
  late final _wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amount =
      _wire__crate__api__bolt11__ffi_bolt_11_payment_send_using_amountPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_11_payment>,
                  ffi.Pointer<wire_cst_bolt_11_invoice>,
                  int,
                  ffi.Pointer<wire_cst_sending_parameters>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refund(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    int amount_msat,
    int expiry_secs,
    ffi.Pointer<ffi.Uint64> quantity,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> payer_note,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refund(
      port_,
      that,
      amount_msat,
      expiry_secs,
      quantity,
      payer_note,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refundPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                      ffi.Uint64,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Uint64>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refund');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refund =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_initiate_refundPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  int,
                  int,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_receive(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    ffi.Pointer<ffi.Uint32> expiry_secs,
    ffi.Pointer<ffi.Uint64> quantity,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_receive(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
      quantity,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_receivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint64>)>>(
      'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_receive');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_receive =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_receivePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint64>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amount(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> description,
    ffi.Pointer<ffi.Uint32> expiry_secs,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amount(
      port_,
      that,
      description,
      expiry_secs,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amountPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<ffi.Uint32>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amount');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amount =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_receive_variable_amountPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<ffi.Uint32>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    ffi.Pointer<wire_cst_refund> refund,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_payment(
      port_,
      that,
      refund,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_paymentPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                      ffi.Pointer<wire_cst_refund>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_payment');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_payment =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_request_refund_paymentPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  ffi.Pointer<wire_cst_refund>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    ffi.Pointer<wire_cst_offer> offer,
    ffi.Pointer<ffi.Uint64> quantity,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> payer_note,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_send(
      port_,
      that,
      offer,
      quantity,
      payer_note,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_sendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  ffi.Pointer<wire_cst_offer>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_send');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_send =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_sendPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
              ffi.Pointer<wire_cst_offer>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amount(
    int port_,
    ffi.Pointer<wire_cst_ffi_bolt_12_payment> that,
    ffi.Pointer<wire_cst_offer> offer,
    int amount_msat,
    ffi.Pointer<ffi.Uint64> quantity,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> payer_note,
  ) {
    return _wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amount(
      port_,
      that,
      offer,
      amount_msat,
      quantity,
      payer_note,
    );
  }

  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amountPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                      ffi.Pointer<wire_cst_offer>,
                      ffi.Uint64,
                      ffi.Pointer<ffi.Uint64>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_ldk_node_wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amount');
  late final _wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amount =
      _wire__crate__api__bolt12__ffi_bolt_12_payment_send_using_amountPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_bolt_12_payment>,
                  ffi.Pointer<wire_cst_offer>,
                  int,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaque(
    int that,
  ) {
    return _wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaque(
      that,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaque');
  late final _wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaque =
      _wire__crate__api__builder__FfiBuilder_auto_accessor_get_opaquePtr
          .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco
      wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaque(
    int that,
    int opaque,
  ) {
    return _wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaque(
      that,
      opaque,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaquePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(ffi.UintPtr, ffi.UintPtr)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaque');
  late final _wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaque =
      _wire__crate__api__builder__FfiBuilder_auto_accessor_set_opaquePtr
          .asFunction<WireSyncRust2DartDco Function(int, int)>();

  void wire__crate__api__builder__FfiBuilder_build(
    int port_,
    int that,
  ) {
    return _wire__crate__api__builder__FfiBuilder_build(
      port_,
      that,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_buildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_build');
  late final _wire__crate__api__builder__FfiBuilder_build =
      _wire__crate__api__builder__FfiBuilder_buildPtr
          .asFunction<void Function(int, int)>();

  void wire__crate__api__builder__FfiBuilder_build_with_fs_store(
    int port_,
    int that,
  ) {
    return _wire__crate__api__builder__FfiBuilder_build_with_fs_store(
      port_,
      that,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_build_with_fs_storePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_build_with_fs_store');
  late final _wire__crate__api__builder__FfiBuilder_build_with_fs_store =
      _wire__crate__api__builder__FfiBuilder_build_with_fs_storePtr
          .asFunction<void Function(int, int)>();

  void wire__crate__api__builder__FfiBuilder_build_with_vss_store(
    int port_,
    int that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> vss_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> store_id,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> lnurl_auth_server_url,
    ffi.Pointer<wire_cst_list_record_string_string> fixed_headers,
  ) {
    return _wire__crate__api__builder__FfiBuilder_build_with_vss_store(
      port_,
      that,
      vss_url,
      store_id,
      lnurl_auth_server_url,
      fixed_headers,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_build_with_vss_storePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.UintPtr,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<wire_cst_list_record_string_string>)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_build_with_vss_store');
  late final _wire__crate__api__builder__FfiBuilder_build_with_vss_store =
      _wire__crate__api__builder__FfiBuilder_build_with_vss_storePtr.asFunction<
          void Function(
              int,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_record_string_string>)>();

  void
      wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headers(
    int port_,
    int that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> vss_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> store_id,
    ffi.Pointer<wire_cst_list_record_string_string> fixed_headers,
  ) {
    return _wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headers(
      port_,
      that,
      vss_url,
      store_id,
      fixed_headers,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.UintPtr,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Pointer<wire_cst_list_record_string_string>)>>(
          'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headers');
  late final _wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headers =
      _wire__crate__api__builder__FfiBuilder_build_with_vss_store_and_fixed_headersPtr
          .asFunction<
              void Function(
                  int,
                  int,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_record_string_string>)>();

  void wire__crate__api__builder__FfiBuilder_create_builder(
    int port_,
    ffi.Pointer<wire_cst_config> config,
    ffi.Pointer<wire_cst_chain_data_source_config> chain_data_source_config,
    ffi.Pointer<wire_cst_entropy_source_config> entropy_source_config,
    ffi.Pointer<wire_cst_gossip_source_config> gossip_source_config,
    ffi.Pointer<wire_cst_liquidity_source_config> liquidity_source_config,
  ) {
    return _wire__crate__api__builder__FfiBuilder_create_builder(
      port_,
      config,
      chain_data_source_config,
      entropy_source_config,
      gossip_source_config,
      liquidity_source_config,
    );
  }

  late final _wire__crate__api__builder__FfiBuilder_create_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_config>,
                  ffi.Pointer<wire_cst_chain_data_source_config>,
                  ffi.Pointer<wire_cst_entropy_source_config>,
                  ffi.Pointer<wire_cst_gossip_source_config>,
                  ffi.Pointer<wire_cst_liquidity_source_config>)>>(
      'frbgen_ldk_node_wire__crate__api__builder__FfiBuilder_create_builder');
  late final _wire__crate__api__builder__FfiBuilder_create_builder =
      _wire__crate__api__builder__FfiBuilder_create_builderPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_config>,
              ffi.Pointer<wire_cst_chain_data_source_config>,
              ffi.Pointer<wire_cst_entropy_source_config>,
              ffi.Pointer<wire_cst_gossip_source_config>,
              ffi.Pointer<wire_cst_liquidity_source_config>)>();

  void wire__crate__api__builder__ffi_mnemonic_generate(
    int port_,
  ) {
    return _wire__crate__api__builder__ffi_mnemonic_generate(
      port_,
    );
  }

  late final _wire__crate__api__builder__ffi_mnemonic_generatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_ldk_node_wire__crate__api__builder__ffi_mnemonic_generate');
  late final _wire__crate__api__builder__ffi_mnemonic_generate =
      _wire__crate__api__builder__ffi_mnemonic_generatePtr
          .asFunction<void Function(int)>();

  void wire__crate__api__graph__ffi_network_graph_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_network_graph> that,
    int short_channel_id,
  ) {
    return _wire__crate__api__graph__ffi_network_graph_channel(
      port_,
      that,
      short_channel_id,
    );
  }

  late final _wire__crate__api__graph__ffi_network_graph_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_network_graph>, ffi.Uint64)>>(
      'frbgen_ldk_node_wire__crate__api__graph__ffi_network_graph_channel');
  late final _wire__crate__api__graph__ffi_network_graph_channel =
      _wire__crate__api__graph__ffi_network_graph_channelPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_network_graph>, int)>();

  void wire__crate__api__graph__ffi_network_graph_list_channels(
    int port_,
    ffi.Pointer<wire_cst_ffi_network_graph> that,
  ) {
    return _wire__crate__api__graph__ffi_network_graph_list_channels(
      port_,
      that,
    );
  }

  late final _wire__crate__api__graph__ffi_network_graph_list_channelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ffi_network_graph>)>>(
      'frbgen_ldk_node_wire__crate__api__graph__ffi_network_graph_list_channels');
  late final _wire__crate__api__graph__ffi_network_graph_list_channels =
      _wire__crate__api__graph__ffi_network_graph_list_channelsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_network_graph>)>();

  void wire__crate__api__graph__ffi_network_graph_list_nodes(
    int port_,
    ffi.Pointer<wire_cst_ffi_network_graph> that,
  ) {
    return _wire__crate__api__graph__ffi_network_graph_list_nodes(
      port_,
      that,
    );
  }

  late final _wire__crate__api__graph__ffi_network_graph_list_nodesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ffi_network_graph>)>>(
      'frbgen_ldk_node_wire__crate__api__graph__ffi_network_graph_list_nodes');
  late final _wire__crate__api__graph__ffi_network_graph_list_nodes =
      _wire__crate__api__graph__ffi_network_graph_list_nodesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_network_graph>)>();

  void wire__crate__api__graph__ffi_network_graph_node(
    int port_,
    ffi.Pointer<wire_cst_ffi_network_graph> that,
    ffi.Pointer<wire_cst_node_id> node_id,
  ) {
    return _wire__crate__api__graph__ffi_network_graph_node(
      port_,
      that,
      node_id,
    );
  }

  late final _wire__crate__api__graph__ffi_network_graph_nodePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_network_graph>,
                  ffi.Pointer<wire_cst_node_id>)>>(
      'frbgen_ldk_node_wire__crate__api__graph__ffi_network_graph_node');
  late final _wire__crate__api__graph__ffi_network_graph_node =
      _wire__crate__api__graph__ffi_network_graph_nodePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_network_graph>,
              ffi.Pointer<wire_cst_node_id>)>();

  void wire__crate__api__node__ffi_node_bolt11_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_bolt11_payment(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_bolt11_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_bolt11_payment');
  late final _wire__crate__api__node__ffi_node_bolt11_payment =
      _wire__crate__api__node__ffi_node_bolt11_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_bolt12_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_bolt12_payment(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_bolt12_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_bolt12_payment');
  late final _wire__crate__api__node__ffi_node_bolt12_payment =
      _wire__crate__api__node__ffi_node_bolt12_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_close_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_user_channel_id> user_channel_id,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
  ) {
    return _wire__crate__api__node__ffi_node_close_channel(
      port_,
      that,
      user_channel_id,
      counterparty_node_id,
    );
  }

  late final _wire__crate__api__node__ffi_node_close_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_user_channel_id>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_close_channel');
  late final _wire__crate__api__node__ffi_node_close_channel =
      _wire__crate__api__node__ffi_node_close_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_user_channel_id>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire__crate__api__node__ffi_node_config(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_config(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_config');
  late final _wire__crate__api__node__ffi_node_config =
      _wire__crate__api__node__ffi_node_configPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_connect(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_public_key> node_id,
    ffi.Pointer<wire_cst_socket_address> address,
    bool persist,
  ) {
    return _wire__crate__api__node__ffi_node_connect(
      port_,
      that,
      node_id,
      address,
      persist,
    );
  }

  late final _wire__crate__api__node__ffi_node_connectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Pointer<wire_cst_socket_address>,
                  ffi.Bool)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_connect');
  late final _wire__crate__api__node__ffi_node_connect =
      _wire__crate__api__node__ffi_node_connectPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_public_key>,
              ffi.Pointer<wire_cst_socket_address>,
              bool)>();

  void wire__crate__api__node__ffi_node_disconnect(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
  ) {
    return _wire__crate__api__node__ffi_node_disconnect(
      port_,
      that,
      counterparty_node_id,
    );
  }

  late final _wire__crate__api__node__ffi_node_disconnectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_disconnect');
  late final _wire__crate__api__node__ffi_node_disconnect =
      _wire__crate__api__node__ffi_node_disconnectPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire__crate__api__node__ffi_node_event_handled(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_event_handled(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_event_handledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_event_handled');
  late final _wire__crate__api__node__ffi_node_event_handled =
      _wire__crate__api__node__ffi_node_event_handledPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_force_close_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_user_channel_id> user_channel_id,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
  ) {
    return _wire__crate__api__node__ffi_node_force_close_channel(
      port_,
      that,
      user_channel_id,
      counterparty_node_id,
    );
  }

  late final _wire__crate__api__node__ffi_node_force_close_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_user_channel_id>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_force_close_channel');
  late final _wire__crate__api__node__ffi_node_force_close_channel =
      _wire__crate__api__node__ffi_node_force_close_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_user_channel_id>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire__crate__api__node__ffi_node_list_balances(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_list_balances(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_list_balancesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_list_balances');
  late final _wire__crate__api__node__ffi_node_list_balances =
      _wire__crate__api__node__ffi_node_list_balancesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_list_channels(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_list_channels(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_list_channelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_list_channels');
  late final _wire__crate__api__node__ffi_node_list_channels =
      _wire__crate__api__node__ffi_node_list_channelsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_list_payments(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_list_payments(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_list_paymentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_list_payments');
  late final _wire__crate__api__node__ffi_node_list_payments =
      _wire__crate__api__node__ffi_node_list_paymentsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_list_payments_with_filter(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    int payment_direction,
  ) {
    return _wire__crate__api__node__ffi_node_list_payments_with_filter(
      port_,
      that,
      payment_direction,
    );
  }

  late final _wire__crate__api__node__ffi_node_list_payments_with_filterPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_ffi_node>, ffi.Int32)>>(
          'frbgen_ldk_node_wire__crate__api__node__ffi_node_list_payments_with_filter');
  late final _wire__crate__api__node__ffi_node_list_payments_with_filter =
      _wire__crate__api__node__ffi_node_list_payments_with_filterPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_node>, int)>();

  void wire__crate__api__node__ffi_node_list_peers(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_list_peers(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_list_peersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_list_peers');
  late final _wire__crate__api__node__ffi_node_list_peers =
      _wire__crate__api__node__ffi_node_list_peersPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_listening_addresses(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_listening_addresses(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_listening_addressesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_listening_addresses');
  late final _wire__crate__api__node__ffi_node_listening_addresses =
      _wire__crate__api__node__ffi_node_listening_addressesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_network_graph(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_network_graph(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_network_graphPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_network_graph');
  late final _wire__crate__api__node__ffi_node_network_graph =
      _wire__crate__api__node__ffi_node_network_graphPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_next_event(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_next_event(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_next_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_next_event');
  late final _wire__crate__api__node__ffi_node_next_event =
      _wire__crate__api__node__ffi_node_next_eventPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_next_event_async(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_next_event_async(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_next_event_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_next_event_async');
  late final _wire__crate__api__node__ffi_node_next_event_async =
      _wire__crate__api__node__ffi_node_next_event_asyncPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_node_id(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_node_id(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_node_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_node_id');
  late final _wire__crate__api__node__ffi_node_node_id =
      _wire__crate__api__node__ffi_node_node_idPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_on_chain_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_on_chain_payment(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_on_chain_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_on_chain_payment');
  late final _wire__crate__api__node__ffi_node_on_chain_payment =
      _wire__crate__api__node__ffi_node_on_chain_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_open_announced_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_socket_address> socket_address,
    ffi.Pointer<wire_cst_public_key> node_id,
    int channel_amount_sats,
    ffi.Pointer<ffi.Uint64> push_to_counterparty_msat,
    ffi.Pointer<wire_cst_channel_config> channel_config,
  ) {
    return _wire__crate__api__node__ffi_node_open_announced_channel(
      port_,
      that,
      socket_address,
      node_id,
      channel_amount_sats,
      push_to_counterparty_msat,
      channel_config,
    );
  }

  late final _wire__crate__api__node__ffi_node_open_announced_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_socket_address>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<wire_cst_channel_config>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_open_announced_channel');
  late final _wire__crate__api__node__ffi_node_open_announced_channel =
      _wire__crate__api__node__ffi_node_open_announced_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_socket_address>,
              ffi.Pointer<wire_cst_public_key>,
              int,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<wire_cst_channel_config>)>();

  void wire__crate__api__node__ffi_node_open_channel(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_socket_address> socket_address,
    ffi.Pointer<wire_cst_public_key> node_id,
    int channel_amount_sats,
    ffi.Pointer<ffi.Uint64> push_to_counterparty_msat,
    ffi.Pointer<wire_cst_channel_config> channel_config,
  ) {
    return _wire__crate__api__node__ffi_node_open_channel(
      port_,
      that,
      socket_address,
      node_id,
      channel_amount_sats,
      push_to_counterparty_msat,
      channel_config,
    );
  }

  late final _wire__crate__api__node__ffi_node_open_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_socket_address>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Pointer<wire_cst_channel_config>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_open_channel');
  late final _wire__crate__api__node__ffi_node_open_channel =
      _wire__crate__api__node__ffi_node_open_channelPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_socket_address>,
              ffi.Pointer<wire_cst_public_key>,
              int,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<wire_cst_channel_config>)>();

  void wire__crate__api__node__ffi_node_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_payment_id> payment_id,
  ) {
    return _wire__crate__api__node__ffi_node_payment(
      port_,
      that,
      payment_id,
    );
  }

  late final _wire__crate__api__node__ffi_node_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_payment_id>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_payment');
  late final _wire__crate__api__node__ffi_node_payment =
      _wire__crate__api__node__ffi_node_paymentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_payment_id>)>();

  void wire__crate__api__node__ffi_node_remove_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_payment_id> payment_id,
  ) {
    return _wire__crate__api__node__ffi_node_remove_payment(
      port_,
      that,
      payment_id,
    );
  }

  late final _wire__crate__api__node__ffi_node_remove_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_payment_id>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_remove_payment');
  late final _wire__crate__api__node__ffi_node_remove_payment =
      _wire__crate__api__node__ffi_node_remove_paymentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_payment_id>)>();

  void wire__crate__api__node__ffi_node_sign_message(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> msg,
  ) {
    return _wire__crate__api__node__ffi_node_sign_message(
      port_,
      that,
      msg,
    );
  }

  late final _wire__crate__api__node__ffi_node_sign_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_sign_message');
  late final _wire__crate__api__node__ffi_node_sign_message =
      _wire__crate__api__node__ffi_node_sign_messagePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire__crate__api__node__ffi_node_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_spontaneous_payment(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_spontaneous_payment');
  late final _wire__crate__api__node__ffi_node_spontaneous_payment =
      _wire__crate__api__node__ffi_node_spontaneous_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_start(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_start(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_start');
  late final _wire__crate__api__node__ffi_node_start =
      _wire__crate__api__node__ffi_node_startPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_status(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_status(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_status');
  late final _wire__crate__api__node__ffi_node_status =
      _wire__crate__api__node__ffi_node_statusPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_stop(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_stop(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_stopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_stop');
  late final _wire__crate__api__node__ffi_node_stop =
      _wire__crate__api__node__ffi_node_stopPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_sync_wallets(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_sync_wallets(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_sync_walletsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_sync_wallets');
  late final _wire__crate__api__node__ffi_node_sync_wallets =
      _wire__crate__api__node__ffi_node_sync_walletsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_unified_qr_payment(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> ptr,
  ) {
    return _wire__crate__api__node__ffi_node_unified_qr_payment(
      port_,
      ptr,
    );
  }

  late final _wire__crate__api__node__ffi_node_unified_qr_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_unified_qr_payment');
  late final _wire__crate__api__node__ffi_node_unified_qr_payment =
      _wire__crate__api__node__ffi_node_unified_qr_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__node__ffi_node_update_channel_config(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_user_channel_id> user_channel_id,
    ffi.Pointer<wire_cst_public_key> counterparty_node_id,
    ffi.Pointer<wire_cst_channel_config> channel_config,
  ) {
    return _wire__crate__api__node__ffi_node_update_channel_config(
      port_,
      that,
      user_channel_id,
      counterparty_node_id,
      channel_config,
    );
  }

  late final _wire__crate__api__node__ffi_node_update_channel_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_user_channel_id>,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Pointer<wire_cst_channel_config>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_update_channel_config');
  late final _wire__crate__api__node__ffi_node_update_channel_config =
      _wire__crate__api__node__ffi_node_update_channel_configPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_user_channel_id>,
              ffi.Pointer<wire_cst_public_key>,
              ffi.Pointer<wire_cst_channel_config>)>();

  void wire__crate__api__node__ffi_node_verify_signature(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> msg,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sig,
    ffi.Pointer<wire_cst_public_key> public_key,
  ) {
    return _wire__crate__api__node__ffi_node_verify_signature(
      port_,
      that,
      msg,
      sig,
      public_key,
    );
  }

  late final _wire__crate__api__node__ffi_node_verify_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_node>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_public_key>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_verify_signature');
  late final _wire__crate__api__node__ffi_node_verify_signature =
      _wire__crate__api__node__ffi_node_verify_signaturePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_node>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_public_key>)>();

  void wire__crate__api__node__ffi_node_wait_next_event(
    int port_,
    ffi.Pointer<wire_cst_ffi_node> that,
  ) {
    return _wire__crate__api__node__ffi_node_wait_next_event(
      port_,
      that,
    );
  }

  late final _wire__crate__api__node__ffi_node_wait_next_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_node>)>>(
      'frbgen_ldk_node_wire__crate__api__node__ffi_node_wait_next_event');
  late final _wire__crate__api__node__ffi_node_wait_next_event =
      _wire__crate__api__node__ffi_node_wait_next_eventPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_node>)>();

  void wire__crate__api__on_chain__ffi_on_chain_payment_new_address(
    int port_,
    ffi.Pointer<wire_cst_ffi_on_chain_payment> that,
  ) {
    return _wire__crate__api__on_chain__ffi_on_chain_payment_new_address(
      port_,
      that,
    );
  }

  late final _wire__crate__api__on_chain__ffi_on_chain_payment_new_addressPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_ffi_on_chain_payment>)>>(
          'frbgen_ldk_node_wire__crate__api__on_chain__ffi_on_chain_payment_new_address');
  late final _wire__crate__api__on_chain__ffi_on_chain_payment_new_address =
      _wire__crate__api__on_chain__ffi_on_chain_payment_new_addressPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_on_chain_payment>)>();

  void wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_address(
    int port_,
    ffi.Pointer<wire_cst_ffi_on_chain_payment> that,
    ffi.Pointer<wire_cst_address> address,
  ) {
    return _wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_address(
      port_,
      that,
      address,
    );
  }

  late final _wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_addressPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_on_chain_payment>,
                      ffi.Pointer<wire_cst_address>)>>(
          'frbgen_ldk_node_wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_address');
  late final _wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_address =
      _wire__crate__api__on_chain__ffi_on_chain_payment_send_all_to_addressPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_on_chain_payment>,
                  ffi.Pointer<wire_cst_address>)>();

  void wire__crate__api__on_chain__ffi_on_chain_payment_send_to_address(
    int port_,
    ffi.Pointer<wire_cst_ffi_on_chain_payment> that,
    ffi.Pointer<wire_cst_address> address,
    int amount_sats,
  ) {
    return _wire__crate__api__on_chain__ffi_on_chain_payment_send_to_address(
      port_,
      that,
      address,
      amount_sats,
    );
  }

  late final _wire__crate__api__on_chain__ffi_on_chain_payment_send_to_addressPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_on_chain_payment>,
                      ffi.Pointer<wire_cst_address>,
                      ffi.Uint64)>>(
          'frbgen_ldk_node_wire__crate__api__on_chain__ffi_on_chain_payment_send_to_address');
  late final _wire__crate__api__on_chain__ffi_on_chain_payment_send_to_address =
      _wire__crate__api__on_chain__ffi_on_chain_payment_send_to_addressPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_on_chain_payment>,
                  ffi.Pointer<wire_cst_address>, int)>();

  void wire__crate__api__spontaneous__ffi_spontaneous_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ffi_spontaneous_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_public_key> node_id,
    ffi.Pointer<wire_cst_sending_parameters> sending_parameters,
  ) {
    return _wire__crate__api__spontaneous__ffi_spontaneous_payment_send(
      port_,
      that,
      amount_msat,
      node_id,
      sending_parameters,
    );
  }

  late final _wire__crate__api__spontaneous__ffi_spontaneous_payment_sendPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_spontaneous_payment>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_public_key>,
                      ffi.Pointer<wire_cst_sending_parameters>)>>(
          'frbgen_ldk_node_wire__crate__api__spontaneous__ffi_spontaneous_payment_send');
  late final _wire__crate__api__spontaneous__ffi_spontaneous_payment_send =
      _wire__crate__api__spontaneous__ffi_spontaneous_payment_sendPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_spontaneous_payment>,
                  int,
                  ffi.Pointer<wire_cst_public_key>,
                  ffi.Pointer<wire_cst_sending_parameters>)>();

  void wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probes(
    int port_,
    ffi.Pointer<wire_cst_ffi_spontaneous_payment> that,
    int amount_msat,
    ffi.Pointer<wire_cst_public_key> node_id,
  ) {
    return _wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probes(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_spontaneous_payment>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_public_key>)>>(
          'frbgen_ldk_node_wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probes');
  late final _wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probes =
      _wire__crate__api__spontaneous__ffi_spontaneous_payment_send_probesPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_spontaneous_payment>,
                  int, ffi.Pointer<wire_cst_public_key>)>();

  void wire__crate__api__types__anchor_channels_config_default(
    int port_,
  ) {
    return _wire__crate__api__types__anchor_channels_config_default(
      port_,
    );
  }

  late final _wire__crate__api__types__anchor_channels_config_defaultPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_ldk_node_wire__crate__api__types__anchor_channels_config_default');
  late final _wire__crate__api__types__anchor_channels_config_default =
      _wire__crate__api__types__anchor_channels_config_defaultPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__types__config_default(
    int port_,
  ) {
    return _wire__crate__api__types__config_default(
      port_,
    );
  }

  late final _wire__crate__api__types__config_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_ldk_node_wire__crate__api__types__config_default');
  late final _wire__crate__api__types__config_default =
      _wire__crate__api__types__config_defaultPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__unified_qr__ffi_unified_qr_payment_receive(
    int port_,
    ffi.Pointer<wire_cst_ffi_unified_qr_payment> that,
    int amount_sats,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> message,
    int expiry_sec,
  ) {
    return _wire__crate__api__unified_qr__ffi_unified_qr_payment_receive(
      port_,
      that,
      amount_sats,
      message,
      expiry_sec,
    );
  }

  late final _wire__crate__api__unified_qr__ffi_unified_qr_payment_receivePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_unified_qr_payment>,
                      ffi.Uint64,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Uint32)>>(
          'frbgen_ldk_node_wire__crate__api__unified_qr__ffi_unified_qr_payment_receive');
  late final _wire__crate__api__unified_qr__ffi_unified_qr_payment_receive =
      _wire__crate__api__unified_qr__ffi_unified_qr_payment_receivePtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_unified_qr_payment>,
                  int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire__crate__api__unified_qr__ffi_unified_qr_payment_send(
    int port_,
    ffi.Pointer<wire_cst_ffi_unified_qr_payment> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> uri_str,
  ) {
    return _wire__crate__api__unified_qr__ffi_unified_qr_payment_send(
      port_,
      that,
      uri_str,
    );
  }

  late final _wire__crate__api__unified_qr__ffi_unified_qr_payment_sendPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_unified_qr_payment>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_ldk_node_wire__crate__api__unified_qr__ffi_unified_qr_payment_send');
  late final _wire__crate__api__unified_qr__ffi_unified_qr_payment_send =
      _wire__crate__api__unified_qr__ffi_unified_qr_payment_sendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_unified_qr_payment>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilder =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilder(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilder');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilder =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodeBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilder(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilder(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilder');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilder =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeBuilderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodeNode(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodeNode(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodeNodePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodeNode');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodeNode =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodeNodePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNode(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNode(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNodePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNode');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNode =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodeNodePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraph(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraph(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraph');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraph =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodegraphNetworkGraphPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraph(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraph(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraph');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraph =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodegraphNetworkGraphPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11Payment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt11PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentBolt12PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12PaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12Payment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentBolt12PaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPayment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentOnchainPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPayment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentSpontaneousPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment');
  late final _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment =
      _rust_arc_increment_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPaymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment');
  late final _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPayment =
      _rust_arc_decrement_strong_count_RustOpaque_ldk_nodepaymentUnifiedQrPaymentPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_address> cst_new_box_autoadd_address() {
    return _cst_new_box_autoadd_address();
  }

  late final _cst_new_box_autoadd_addressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_address> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_address');
  late final _cst_new_box_autoadd_address = _cst_new_box_autoadd_addressPtr
      .asFunction<ffi.Pointer<wire_cst_address> Function()>();

  ffi.Pointer<wire_cst_anchor_channels_config>
      cst_new_box_autoadd_anchor_channels_config() {
    return _cst_new_box_autoadd_anchor_channels_config();
  }

  late final _cst_new_box_autoadd_anchor_channels_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_anchor_channels_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_anchor_channels_config');
  late final _cst_new_box_autoadd_anchor_channels_config =
      _cst_new_box_autoadd_anchor_channels_configPtr.asFunction<
          ffi.Pointer<wire_cst_anchor_channels_config> Function()>();

  ffi.Pointer<wire_cst_bolt_11_invoice> cst_new_box_autoadd_bolt_11_invoice() {
    return _cst_new_box_autoadd_bolt_11_invoice();
  }

  late final _cst_new_box_autoadd_bolt_11_invoicePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bolt_11_invoice> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_bolt_11_invoice');
  late final _cst_new_box_autoadd_bolt_11_invoice =
      _cst_new_box_autoadd_bolt_11_invoicePtr
          .asFunction<ffi.Pointer<wire_cst_bolt_11_invoice> Function()>();

  ffi.Pointer<wire_cst_bolt_12_parse_error>
      cst_new_box_autoadd_bolt_12_parse_error() {
    return _cst_new_box_autoadd_bolt_12_parse_error();
  }

  late final _cst_new_box_autoadd_bolt_12_parse_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bolt_12_parse_error> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_bolt_12_parse_error');
  late final _cst_new_box_autoadd_bolt_12_parse_error =
      _cst_new_box_autoadd_bolt_12_parse_errorPtr
          .asFunction<ffi.Pointer<wire_cst_bolt_12_parse_error> Function()>();

  ffi.Pointer<ffi.Bool> cst_new_box_autoadd_bool(
    bool value,
  ) {
    return _cst_new_box_autoadd_bool(
      value,
    );
  }

  late final _cst_new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_bool');
  late final _cst_new_box_autoadd_bool = _cst_new_box_autoadd_boolPtr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_cst_chain_data_source_config>
      cst_new_box_autoadd_chain_data_source_config() {
    return _cst_new_box_autoadd_chain_data_source_config();
  }

  late final _cst_new_box_autoadd_chain_data_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_chain_data_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_chain_data_source_config');
  late final _cst_new_box_autoadd_chain_data_source_config =
      _cst_new_box_autoadd_chain_data_source_configPtr.asFunction<
          ffi.Pointer<wire_cst_chain_data_source_config> Function()>();

  ffi.Pointer<wire_cst_channel_config> cst_new_box_autoadd_channel_config() {
    return _cst_new_box_autoadd_channel_config();
  }

  late final _cst_new_box_autoadd_channel_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_channel_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_channel_config');
  late final _cst_new_box_autoadd_channel_config =
      _cst_new_box_autoadd_channel_configPtr
          .asFunction<ffi.Pointer<wire_cst_channel_config> Function()>();

  ffi.Pointer<wire_cst_channel_id> cst_new_box_autoadd_channel_id() {
    return _cst_new_box_autoadd_channel_id();
  }

  late final _cst_new_box_autoadd_channel_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_channel_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_channel_id');
  late final _cst_new_box_autoadd_channel_id =
      _cst_new_box_autoadd_channel_idPtr
          .asFunction<ffi.Pointer<wire_cst_channel_id> Function()>();

  ffi.Pointer<wire_cst_channel_info> cst_new_box_autoadd_channel_info() {
    return _cst_new_box_autoadd_channel_info();
  }

  late final _cst_new_box_autoadd_channel_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_channel_info> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_channel_info');
  late final _cst_new_box_autoadd_channel_info =
      _cst_new_box_autoadd_channel_infoPtr
          .asFunction<ffi.Pointer<wire_cst_channel_info> Function()>();

  ffi.Pointer<wire_cst_channel_update_info>
      cst_new_box_autoadd_channel_update_info() {
    return _cst_new_box_autoadd_channel_update_info();
  }

  late final _cst_new_box_autoadd_channel_update_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_channel_update_info> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_channel_update_info');
  late final _cst_new_box_autoadd_channel_update_info =
      _cst_new_box_autoadd_channel_update_infoPtr
          .asFunction<ffi.Pointer<wire_cst_channel_update_info> Function()>();

  ffi.Pointer<wire_cst_closure_reason> cst_new_box_autoadd_closure_reason() {
    return _cst_new_box_autoadd_closure_reason();
  }

  late final _cst_new_box_autoadd_closure_reasonPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_closure_reason> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_closure_reason');
  late final _cst_new_box_autoadd_closure_reason =
      _cst_new_box_autoadd_closure_reasonPtr
          .asFunction<ffi.Pointer<wire_cst_closure_reason> Function()>();

  ffi.Pointer<wire_cst_config> cst_new_box_autoadd_config() {
    return _cst_new_box_autoadd_config();
  }

  late final _cst_new_box_autoadd_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_config> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_config');
  late final _cst_new_box_autoadd_config = _cst_new_box_autoadd_configPtr
      .asFunction<ffi.Pointer<wire_cst_config> Function()>();

  ffi.Pointer<wire_cst_decode_error> cst_new_box_autoadd_decode_error() {
    return _cst_new_box_autoadd_decode_error();
  }

  late final _cst_new_box_autoadd_decode_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_decode_error> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_decode_error');
  late final _cst_new_box_autoadd_decode_error =
      _cst_new_box_autoadd_decode_errorPtr
          .asFunction<ffi.Pointer<wire_cst_decode_error> Function()>();

  ffi.Pointer<wire_cst_entropy_source_config>
      cst_new_box_autoadd_entropy_source_config() {
    return _cst_new_box_autoadd_entropy_source_config();
  }

  late final _cst_new_box_autoadd_entropy_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_entropy_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_entropy_source_config');
  late final _cst_new_box_autoadd_entropy_source_config =
      _cst_new_box_autoadd_entropy_source_configPtr
          .asFunction<ffi.Pointer<wire_cst_entropy_source_config> Function()>();

  ffi.Pointer<wire_cst_esplora_sync_config>
      cst_new_box_autoadd_esplora_sync_config() {
    return _cst_new_box_autoadd_esplora_sync_config();
  }

  late final _cst_new_box_autoadd_esplora_sync_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_esplora_sync_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_esplora_sync_config');
  late final _cst_new_box_autoadd_esplora_sync_config =
      _cst_new_box_autoadd_esplora_sync_configPtr
          .asFunction<ffi.Pointer<wire_cst_esplora_sync_config> Function()>();

  ffi.Pointer<wire_cst_event> cst_new_box_autoadd_event() {
    return _cst_new_box_autoadd_event();
  }

  late final _cst_new_box_autoadd_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_event> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_event');
  late final _cst_new_box_autoadd_event = _cst_new_box_autoadd_eventPtr
      .asFunction<ffi.Pointer<wire_cst_event> Function()>();

  ffi.Pointer<wire_cst_ffi_bolt_11_payment>
      cst_new_box_autoadd_ffi_bolt_11_payment() {
    return _cst_new_box_autoadd_ffi_bolt_11_payment();
  }

  late final _cst_new_box_autoadd_ffi_bolt_11_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_bolt_11_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_bolt_11_payment');
  late final _cst_new_box_autoadd_ffi_bolt_11_payment =
      _cst_new_box_autoadd_ffi_bolt_11_paymentPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_bolt_11_payment> Function()>();

  ffi.Pointer<wire_cst_ffi_bolt_12_payment>
      cst_new_box_autoadd_ffi_bolt_12_payment() {
    return _cst_new_box_autoadd_ffi_bolt_12_payment();
  }

  late final _cst_new_box_autoadd_ffi_bolt_12_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_bolt_12_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_bolt_12_payment');
  late final _cst_new_box_autoadd_ffi_bolt_12_payment =
      _cst_new_box_autoadd_ffi_bolt_12_paymentPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_bolt_12_payment> Function()>();

  ffi.Pointer<wire_cst_ffi_mnemonic> cst_new_box_autoadd_ffi_mnemonic() {
    return _cst_new_box_autoadd_ffi_mnemonic();
  }

  late final _cst_new_box_autoadd_ffi_mnemonicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_mnemonic> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_mnemonic');
  late final _cst_new_box_autoadd_ffi_mnemonic =
      _cst_new_box_autoadd_ffi_mnemonicPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_mnemonic> Function()>();

  ffi.Pointer<wire_cst_ffi_network_graph>
      cst_new_box_autoadd_ffi_network_graph() {
    return _cst_new_box_autoadd_ffi_network_graph();
  }

  late final _cst_new_box_autoadd_ffi_network_graphPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_ffi_network_graph> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_network_graph');
  late final _cst_new_box_autoadd_ffi_network_graph =
      _cst_new_box_autoadd_ffi_network_graphPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_network_graph> Function()>();

  ffi.Pointer<wire_cst_ffi_node> cst_new_box_autoadd_ffi_node() {
    return _cst_new_box_autoadd_ffi_node();
  }

  late final _cst_new_box_autoadd_ffi_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_node> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_ffi_node');
  late final _cst_new_box_autoadd_ffi_node = _cst_new_box_autoadd_ffi_nodePtr
      .asFunction<ffi.Pointer<wire_cst_ffi_node> Function()>();

  ffi.Pointer<wire_cst_ffi_on_chain_payment>
      cst_new_box_autoadd_ffi_on_chain_payment() {
    return _cst_new_box_autoadd_ffi_on_chain_payment();
  }

  late final _cst_new_box_autoadd_ffi_on_chain_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_on_chain_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_on_chain_payment');
  late final _cst_new_box_autoadd_ffi_on_chain_payment =
      _cst_new_box_autoadd_ffi_on_chain_paymentPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_on_chain_payment> Function()>();

  ffi.Pointer<wire_cst_ffi_spontaneous_payment>
      cst_new_box_autoadd_ffi_spontaneous_payment() {
    return _cst_new_box_autoadd_ffi_spontaneous_payment();
  }

  late final _cst_new_box_autoadd_ffi_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_spontaneous_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_spontaneous_payment');
  late final _cst_new_box_autoadd_ffi_spontaneous_payment =
      _cst_new_box_autoadd_ffi_spontaneous_paymentPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_spontaneous_payment> Function()>();

  ffi.Pointer<wire_cst_ffi_unified_qr_payment>
      cst_new_box_autoadd_ffi_unified_qr_payment() {
    return _cst_new_box_autoadd_ffi_unified_qr_payment();
  }

  late final _cst_new_box_autoadd_ffi_unified_qr_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_unified_qr_payment> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_ffi_unified_qr_payment');
  late final _cst_new_box_autoadd_ffi_unified_qr_payment =
      _cst_new_box_autoadd_ffi_unified_qr_paymentPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_unified_qr_payment> Function()>();

  ffi.Pointer<wire_cst_gossip_source_config>
      cst_new_box_autoadd_gossip_source_config() {
    return _cst_new_box_autoadd_gossip_source_config();
  }

  late final _cst_new_box_autoadd_gossip_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_gossip_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_gossip_source_config');
  late final _cst_new_box_autoadd_gossip_source_config =
      _cst_new_box_autoadd_gossip_source_configPtr
          .asFunction<ffi.Pointer<wire_cst_gossip_source_config> Function()>();

  ffi.Pointer<wire_cst_liquidity_source_config>
      cst_new_box_autoadd_liquidity_source_config() {
    return _cst_new_box_autoadd_liquidity_source_config();
  }

  late final _cst_new_box_autoadd_liquidity_source_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_liquidity_source_config> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_liquidity_source_config');
  late final _cst_new_box_autoadd_liquidity_source_config =
      _cst_new_box_autoadd_liquidity_source_configPtr.asFunction<
          ffi.Pointer<wire_cst_liquidity_source_config> Function()>();

  ffi.Pointer<wire_cst_lsp_fee_limits> cst_new_box_autoadd_lsp_fee_limits() {
    return _cst_new_box_autoadd_lsp_fee_limits();
  }

  late final _cst_new_box_autoadd_lsp_fee_limitsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_lsp_fee_limits> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_lsp_fee_limits');
  late final _cst_new_box_autoadd_lsp_fee_limits =
      _cst_new_box_autoadd_lsp_fee_limitsPtr
          .asFunction<ffi.Pointer<wire_cst_lsp_fee_limits> Function()>();

  ffi.Pointer<wire_cst_max_total_routing_fee_limit>
      cst_new_box_autoadd_max_total_routing_fee_limit() {
    return _cst_new_box_autoadd_max_total_routing_fee_limit();
  }

  late final _cst_new_box_autoadd_max_total_routing_fee_limitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_max_total_routing_fee_limit> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_max_total_routing_fee_limit');
  late final _cst_new_box_autoadd_max_total_routing_fee_limit =
      _cst_new_box_autoadd_max_total_routing_fee_limitPtr.asFunction<
          ffi.Pointer<wire_cst_max_total_routing_fee_limit> Function()>();

  ffi.Pointer<wire_cst_node_alias> cst_new_box_autoadd_node_alias() {
    return _cst_new_box_autoadd_node_alias();
  }

  late final _cst_new_box_autoadd_node_aliasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_node_alias> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_node_alias');
  late final _cst_new_box_autoadd_node_alias =
      _cst_new_box_autoadd_node_aliasPtr
          .asFunction<ffi.Pointer<wire_cst_node_alias> Function()>();

  ffi.Pointer<wire_cst_node_announcement_info>
      cst_new_box_autoadd_node_announcement_info() {
    return _cst_new_box_autoadd_node_announcement_info();
  }

  late final _cst_new_box_autoadd_node_announcement_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_node_announcement_info> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_node_announcement_info');
  late final _cst_new_box_autoadd_node_announcement_info =
      _cst_new_box_autoadd_node_announcement_infoPtr.asFunction<
          ffi.Pointer<wire_cst_node_announcement_info> Function()>();

  ffi.Pointer<wire_cst_node_id> cst_new_box_autoadd_node_id() {
    return _cst_new_box_autoadd_node_id();
  }

  late final _cst_new_box_autoadd_node_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_node_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_node_id');
  late final _cst_new_box_autoadd_node_id = _cst_new_box_autoadd_node_idPtr
      .asFunction<ffi.Pointer<wire_cst_node_id> Function()>();

  ffi.Pointer<wire_cst_node_info> cst_new_box_autoadd_node_info() {
    return _cst_new_box_autoadd_node_info();
  }

  late final _cst_new_box_autoadd_node_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_node_info> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_node_info');
  late final _cst_new_box_autoadd_node_info = _cst_new_box_autoadd_node_infoPtr
      .asFunction<ffi.Pointer<wire_cst_node_info> Function()>();

  ffi.Pointer<wire_cst_offer> cst_new_box_autoadd_offer() {
    return _cst_new_box_autoadd_offer();
  }

  late final _cst_new_box_autoadd_offerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_offer> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_offer');
  late final _cst_new_box_autoadd_offer = _cst_new_box_autoadd_offerPtr
      .asFunction<ffi.Pointer<wire_cst_offer> Function()>();

  ffi.Pointer<wire_cst_offer_id> cst_new_box_autoadd_offer_id() {
    return _cst_new_box_autoadd_offer_id();
  }

  late final _cst_new_box_autoadd_offer_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_offer_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_offer_id');
  late final _cst_new_box_autoadd_offer_id = _cst_new_box_autoadd_offer_idPtr
      .asFunction<ffi.Pointer<wire_cst_offer_id> Function()>();

  ffi.Pointer<wire_cst_out_point> cst_new_box_autoadd_out_point() {
    return _cst_new_box_autoadd_out_point();
  }

  late final _cst_new_box_autoadd_out_pointPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_out_point> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_out_point');
  late final _cst_new_box_autoadd_out_point = _cst_new_box_autoadd_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_out_point> Function()>();

  ffi.Pointer<wire_cst_payment_details> cst_new_box_autoadd_payment_details() {
    return _cst_new_box_autoadd_payment_details();
  }

  late final _cst_new_box_autoadd_payment_detailsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_details> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_details');
  late final _cst_new_box_autoadd_payment_details =
      _cst_new_box_autoadd_payment_detailsPtr
          .asFunction<ffi.Pointer<wire_cst_payment_details> Function()>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_payment_failure_reason(
    int value,
  ) {
    return _cst_new_box_autoadd_payment_failure_reason(
      value,
    );
  }

  late final _cst_new_box_autoadd_payment_failure_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_payment_failure_reason');
  late final _cst_new_box_autoadd_payment_failure_reason =
      _cst_new_box_autoadd_payment_failure_reasonPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_payment_hash> cst_new_box_autoadd_payment_hash() {
    return _cst_new_box_autoadd_payment_hash();
  }

  late final _cst_new_box_autoadd_payment_hashPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_hash> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_hash');
  late final _cst_new_box_autoadd_payment_hash =
      _cst_new_box_autoadd_payment_hashPtr
          .asFunction<ffi.Pointer<wire_cst_payment_hash> Function()>();

  ffi.Pointer<wire_cst_payment_id> cst_new_box_autoadd_payment_id() {
    return _cst_new_box_autoadd_payment_id();
  }

  late final _cst_new_box_autoadd_payment_idPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_payment_id> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_payment_id');
  late final _cst_new_box_autoadd_payment_id =
      _cst_new_box_autoadd_payment_idPtr
          .asFunction<ffi.Pointer<wire_cst_payment_id> Function()>();

  ffi.Pointer<wire_cst_payment_preimage>
      cst_new_box_autoadd_payment_preimage() {
    return _cst_new_box_autoadd_payment_preimage();
  }

  late final _cst_new_box_autoadd_payment_preimagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_payment_preimage> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_preimage');
  late final _cst_new_box_autoadd_payment_preimage =
      _cst_new_box_autoadd_payment_preimagePtr
          .asFunction<ffi.Pointer<wire_cst_payment_preimage> Function()>();

  ffi.Pointer<wire_cst_payment_secret> cst_new_box_autoadd_payment_secret() {
    return _cst_new_box_autoadd_payment_secret();
  }

  late final _cst_new_box_autoadd_payment_secretPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_payment_secret> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_payment_secret');
  late final _cst_new_box_autoadd_payment_secret =
      _cst_new_box_autoadd_payment_secretPtr
          .asFunction<ffi.Pointer<wire_cst_payment_secret> Function()>();

  ffi.Pointer<wire_cst_public_key> cst_new_box_autoadd_public_key() {
    return _cst_new_box_autoadd_public_key();
  }

  late final _cst_new_box_autoadd_public_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_public_key> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_public_key');
  late final _cst_new_box_autoadd_public_key =
      _cst_new_box_autoadd_public_keyPtr
          .asFunction<ffi.Pointer<wire_cst_public_key> Function()>();

  ffi.Pointer<wire_cst_refund> cst_new_box_autoadd_refund() {
    return _cst_new_box_autoadd_refund();
  }

  late final _cst_new_box_autoadd_refundPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_refund> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_refund');
  late final _cst_new_box_autoadd_refund = _cst_new_box_autoadd_refundPtr
      .asFunction<ffi.Pointer<wire_cst_refund> Function()>();

  ffi.Pointer<wire_cst_sending_parameters>
      cst_new_box_autoadd_sending_parameters() {
    return _cst_new_box_autoadd_sending_parameters();
  }

  late final _cst_new_box_autoadd_sending_parametersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_sending_parameters> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_sending_parameters');
  late final _cst_new_box_autoadd_sending_parameters =
      _cst_new_box_autoadd_sending_parametersPtr
          .asFunction<ffi.Pointer<wire_cst_sending_parameters> Function()>();

  ffi.Pointer<wire_cst_socket_address> cst_new_box_autoadd_socket_address() {
    return _cst_new_box_autoadd_socket_address();
  }

  late final _cst_new_box_autoadd_socket_addressPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_socket_address> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_socket_address');
  late final _cst_new_box_autoadd_socket_address =
      _cst_new_box_autoadd_socket_addressPtr
          .asFunction<ffi.Pointer<wire_cst_socket_address> Function()>();

  ffi.Pointer<wire_cst_txid> cst_new_box_autoadd_txid() {
    return _cst_new_box_autoadd_txid();
  }

  late final _cst_new_box_autoadd_txidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_txid> Function()>>(
          'frbgen_ldk_node_cst_new_box_autoadd_txid');
  late final _cst_new_box_autoadd_txid = _cst_new_box_autoadd_txidPtr
      .asFunction<ffi.Pointer<wire_cst_txid> Function()>();

  ffi.Pointer<ffi.Uint16> cst_new_box_autoadd_u_16(
    int value,
  ) {
    return _cst_new_box_autoadd_u_16(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Uint16)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_16');
  late final _cst_new_box_autoadd_u_16 = _cst_new_box_autoadd_u_16Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(int)>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.Uint8> cst_new_box_autoadd_u_8(
    int value,
  ) {
    return _cst_new_box_autoadd_u_8(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'frbgen_ldk_node_cst_new_box_autoadd_u_8');
  late final _cst_new_box_autoadd_u_8 = _cst_new_box_autoadd_u_8Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_cst_user_channel_id> cst_new_box_autoadd_user_channel_id() {
    return _cst_new_box_autoadd_user_channel_id();
  }

  late final _cst_new_box_autoadd_user_channel_idPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_user_channel_id> Function()>>(
      'frbgen_ldk_node_cst_new_box_autoadd_user_channel_id');
  late final _cst_new_box_autoadd_user_channel_id =
      _cst_new_box_autoadd_user_channel_idPtr
          .asFunction<ffi.Pointer<wire_cst_user_channel_id> Function()>();

  ffi.Pointer<wire_cst_list_channel_details> cst_new_list_channel_details(
    int len,
  ) {
    return _cst_new_list_channel_details(
      len,
    );
  }

  late final _cst_new_list_channel_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_channel_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_channel_details');
  late final _cst_new_list_channel_details = _cst_new_list_channel_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_channel_details> Function(int)>();

  ffi.Pointer<wire_cst_list_lightning_balance> cst_new_list_lightning_balance(
    int len,
  ) {
    return _cst_new_list_lightning_balance(
      len,
    );
  }

  late final _cst_new_list_lightning_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_lightning_balance> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_lightning_balance');
  late final _cst_new_list_lightning_balance =
      _cst_new_list_lightning_balancePtr.asFunction<
          ffi.Pointer<wire_cst_list_lightning_balance> Function(int)>();

  ffi.Pointer<wire_cst_list_node_id> cst_new_list_node_id(
    int len,
  ) {
    return _cst_new_list_node_id(
      len,
    );
  }

  late final _cst_new_list_node_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_node_id> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_node_id');
  late final _cst_new_list_node_id = _cst_new_list_node_idPtr
      .asFunction<ffi.Pointer<wire_cst_list_node_id> Function(int)>();

  ffi.Pointer<wire_cst_list_payment_details> cst_new_list_payment_details(
    int len,
  ) {
    return _cst_new_list_payment_details(
      len,
    );
  }

  late final _cst_new_list_payment_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_payment_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_payment_details');
  late final _cst_new_list_payment_details = _cst_new_list_payment_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_payment_details> Function(int)>();

  ffi.Pointer<wire_cst_list_peer_details> cst_new_list_peer_details(
    int len,
  ) {
    return _cst_new_list_peer_details(
      len,
    );
  }

  late final _cst_new_list_peer_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_peer_details> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_peer_details');
  late final _cst_new_list_peer_details = _cst_new_list_peer_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_list_peer_details> Function(int)>();

  ffi.Pointer<wire_cst_list_pending_sweep_balance>
      cst_new_list_pending_sweep_balance(
    int len,
  ) {
    return _cst_new_list_pending_sweep_balance(
      len,
    );
  }

  late final _cst_new_list_pending_sweep_balancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_pending_sweep_balance> Function(
                  ffi.Int32)>>(
      'frbgen_ldk_node_cst_new_list_pending_sweep_balance');
  late final _cst_new_list_pending_sweep_balance =
      _cst_new_list_pending_sweep_balancePtr.asFunction<
          ffi.Pointer<wire_cst_list_pending_sweep_balance> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_64_strict> cst_new_list_prim_u_64_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_64_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_64_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_64_strict> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_prim_u_64_strict');
  late final _cst_new_list_prim_u_64_strict = _cst_new_list_prim_u_64_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_64_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_public_key> cst_new_list_public_key(
    int len,
  ) {
    return _cst_new_list_public_key(
      len,
    );
  }

  late final _cst_new_list_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_public_key> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_public_key');
  late final _cst_new_list_public_key = _cst_new_list_public_keyPtr
      .asFunction<ffi.Pointer<wire_cst_list_public_key> Function(int)>();

  ffi.Pointer<wire_cst_list_record_string_string>
      cst_new_list_record_string_string(
    int len,
  ) {
    return _cst_new_list_record_string_string(
      len,
    );
  }

  late final _cst_new_list_record_string_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_record_string_string');
  late final _cst_new_list_record_string_string =
      _cst_new_list_record_string_stringPtr.asFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(int)>();

  ffi.Pointer<wire_cst_list_socket_address> cst_new_list_socket_address(
    int len,
  ) {
    return _cst_new_list_socket_address(
      len,
    );
  }

  late final _cst_new_list_socket_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_socket_address> Function(
              ffi.Int32)>>('frbgen_ldk_node_cst_new_list_socket_address');
  late final _cst_new_list_socket_address = _cst_new_list_socket_addressPtr
      .asFunction<ffi.Pointer<wire_cst_list_socket_address> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;
typedef DartPostCObjectFnTypeFunction = ffi.Bool Function(
    DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction = bool Function(
    DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

final class wire_cst_ffi_bolt_11_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_payment_hash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_payment_preimage extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_bolt_11_invoice extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> signed_raw_invoice;
}

final class wire_cst_MaxTotalRoutingFeeLimit_FeeCap extends ffi.Struct {
  @ffi.Uint64()
  external int amount_msat;
}

final class MaxTotalRoutingFeeLimitKind extends ffi.Union {
  external wire_cst_MaxTotalRoutingFeeLimit_FeeCap FeeCap;
}

final class wire_cst_max_total_routing_fee_limit extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external MaxTotalRoutingFeeLimitKind kind;
}

final class wire_cst_sending_parameters extends ffi.Struct {
  external ffi.Pointer<wire_cst_max_total_routing_fee_limit>
      max_total_routing_fee_msat;

  external ffi.Pointer<ffi.Uint32> max_total_cltv_expiry_delta;

  external ffi.Pointer<ffi.Uint8> max_path_count;

  external ffi.Pointer<ffi.Uint8> max_channel_saturation_power_of_half;
}

final class wire_cst_ffi_bolt_12_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_refund extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_offer extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field1;
}

final class wire_cst_list_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_record_string_string> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_SocketAddress_TcpIpV4 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_TcpIpV6 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_OnionV2 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_SocketAddress_OnionV3 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> ed25519_pubkey;

  @ffi.Uint16()
  external int checksum;

  @ffi.Uint8()
  external int version;

  @ffi.Uint16()
  external int port;
}

final class wire_cst_SocketAddress_Hostname extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> addr;

  @ffi.Uint16()
  external int port;
}

final class SocketAddressKind extends ffi.Union {
  external wire_cst_SocketAddress_TcpIpV4 TcpIpV4;

  external wire_cst_SocketAddress_TcpIpV6 TcpIpV6;

  external wire_cst_SocketAddress_OnionV2 OnionV2;

  external wire_cst_SocketAddress_OnionV3 OnionV3;

  external wire_cst_SocketAddress_Hostname Hostname;
}

final class wire_cst_socket_address extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external SocketAddressKind kind;
}

final class wire_cst_list_socket_address extends ffi.Struct {
  external ffi.Pointer<wire_cst_socket_address> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_node_alias extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_public_key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hex;
}

final class wire_cst_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_cst_public_key> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_anchor_channels_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_public_key> trusted_peers_no_reserve;

  @ffi.Uint64()
  external int per_channel_reserve_sats;
}

final class wire_cst_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> storage_dir_path;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> log_dir_path;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_cst_list_socket_address> listening_addresses;

  external ffi.Pointer<wire_cst_node_alias> node_alias;

  external ffi.Pointer<wire_cst_list_public_key> trusted_peers_0conf;

  @ffi.Uint64()
  external int probing_liquidity_limit_multiplier;

  @ffi.Int32()
  external int log_level;

  external ffi.Pointer<wire_cst_anchor_channels_config> anchor_channels_config;

  external ffi.Pointer<wire_cst_sending_parameters> sending_parameters;
}

final class wire_cst_esplora_sync_config extends ffi.Struct {
  @ffi.Uint64()
  external int onchain_wallet_sync_interval_secs;

  @ffi.Uint64()
  external int lightning_wallet_sync_interval_secs;

  @ffi.Uint64()
  external int fee_rate_cache_update_interval_secs;
}

final class wire_cst_ChainDataSourceConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> server_url;

  external ffi.Pointer<wire_cst_esplora_sync_config> sync_config;
}

final class wire_cst_ChainDataSourceConfig_BitcoindRpc extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> rpc_host;

  @ffi.Uint16()
  external int rpc_port;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> rpc_user;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> rpc_password;
}

final class ChainDataSourceConfigKind extends ffi.Union {
  external wire_cst_ChainDataSourceConfig_Esplora Esplora;

  external wire_cst_ChainDataSourceConfig_BitcoindRpc BitcoindRpc;
}

final class wire_cst_chain_data_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ChainDataSourceConfigKind kind;
}

final class wire_cst_EntropySourceConfig_SeedFile extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_EntropySourceConfig_SeedBytes extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ffi_mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> seed_phrase;
}

final class wire_cst_EntropySourceConfig_Bip39Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_cst_ffi_mnemonic> mnemonic;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> passphrase;
}

final class EntropySourceConfigKind extends ffi.Union {
  external wire_cst_EntropySourceConfig_SeedFile SeedFile;

  external wire_cst_EntropySourceConfig_SeedBytes SeedBytes;

  external wire_cst_EntropySourceConfig_Bip39Mnemonic Bip39Mnemonic;
}

final class wire_cst_entropy_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external EntropySourceConfigKind kind;
}

final class wire_cst_GossipSourceConfig_RapidGossipSync extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class GossipSourceConfigKind extends ffi.Union {
  external wire_cst_GossipSourceConfig_RapidGossipSync RapidGossipSync;
}

final class wire_cst_gossip_source_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external GossipSourceConfigKind kind;
}

final class wire_cst_record_socket_address_public_key_opt_string
    extends ffi.Struct {
  external wire_cst_socket_address field0;

  external wire_cst_public_key field1;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field2;
}

final class wire_cst_liquidity_source_config extends ffi.Struct {
  external wire_cst_record_socket_address_public_key_opt_string lsps2_service;
}

final class wire_cst_ffi_network_graph extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_node_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> compressed;
}

final class wire_cst_ffi_node extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_user_channel_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_MaxDustHTLCExposure_FixedLimitMsat extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class wire_cst_MaxDustHTLCExposure_FeeRateMultiplier extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class MaxDustHTLCExposureKind extends ffi.Union {
  external wire_cst_MaxDustHTLCExposure_FixedLimitMsat FixedLimitMsat;

  external wire_cst_MaxDustHTLCExposure_FeeRateMultiplier FeeRateMultiplier;
}

final class wire_cst_max_dust_htlc_exposure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external MaxDustHTLCExposureKind kind;
}

final class wire_cst_channel_config extends ffi.Struct {
  @ffi.Uint32()
  external int forwarding_fee_proportional_millionths;

  @ffi.Uint32()
  external int forwarding_fee_base_msat;

  @ffi.Uint16()
  external int cltv_expiry_delta;

  external wire_cst_max_dust_htlc_exposure max_dust_htlc_exposure;

  @ffi.Uint64()
  external int force_close_avoidance_max_fee_satoshis;

  @ffi.Bool()
  external bool accept_underpaying_htlcs;
}

final class wire_cst_payment_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_ffi_on_chain_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_address extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_ffi_spontaneous_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_unified_qr_payment extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_Bolt12ParseError_Bech32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DecodeError_Io extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class DecodeErrorKind extends ffi.Union {
  external wire_cst_DecodeError_Io Io;
}

final class wire_cst_decode_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DecodeErrorKind kind;
}

final class wire_cst_Bolt12ParseError_Decode extends ffi.Struct {
  external ffi.Pointer<wire_cst_decode_error> field0;
}

final class wire_cst_Bolt12ParseError_InvalidSemantics extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_Bolt12ParseError_InvalidSignature extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class Bolt12ParseErrorKind extends ffi.Union {
  external wire_cst_Bolt12ParseError_Bech32 Bech32;

  external wire_cst_Bolt12ParseError_Decode Decode;

  external wire_cst_Bolt12ParseError_InvalidSemantics InvalidSemantics;

  external wire_cst_Bolt12ParseError_InvalidSignature InvalidSignature;
}

final class wire_cst_bolt_12_parse_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external Bolt12ParseErrorKind kind;
}

final class wire_cst_channel_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_routing_fees extends ffi.Struct {
  @ffi.Uint32()
  external int base_msat;

  @ffi.Uint32()
  external int proportional_millionths;
}

final class wire_cst_channel_update_info extends ffi.Struct {
  @ffi.Uint32()
  external int last_update;

  @ffi.Bool()
  external bool enabled;

  @ffi.Uint16()
  external int cltv_expiry_delta;

  @ffi.Uint64()
  external int htlc_minimum_msat;

  @ffi.Uint64()
  external int htlc_maximum_msat;

  external wire_cst_routing_fees fees;
}

final class wire_cst_channel_info extends ffi.Struct {
  external wire_cst_node_id node_one;

  external ffi.Pointer<wire_cst_channel_update_info> one_to_two;

  external wire_cst_node_id node_two;

  external ffi.Pointer<wire_cst_channel_update_info> two_to_one;

  external ffi.Pointer<ffi.Uint64> capacity_sats;
}

final class wire_cst_ClosureReason_PeerFeerateTooLow extends ffi.Struct {
  @ffi.Uint32()
  external int peer_feerate_sat_per_kw;

  @ffi.Uint32()
  external int required_feerate_sat_per_kw;
}

final class wire_cst_ClosureReason_CounterpartyForceClosed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> peer_msg;
}

final class wire_cst_ClosureReason_HolderForceClosed extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> broadcasted_latest_txn;
}

final class wire_cst_ClosureReason_ProcessingError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> err;
}

final class ClosureReasonKind extends ffi.Union {
  external wire_cst_ClosureReason_PeerFeerateTooLow PeerFeerateTooLow;

  external wire_cst_ClosureReason_CounterpartyForceClosed
      CounterpartyForceClosed;

  external wire_cst_ClosureReason_HolderForceClosed HolderForceClosed;

  external wire_cst_ClosureReason_ProcessingError ProcessingError;
}

final class wire_cst_closure_reason extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ClosureReasonKind kind;
}

final class wire_cst_Event_PaymentClaimable extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  @ffi.Uint64()
  external int claimable_amount_msat;

  external ffi.Pointer<ffi.Uint32> claim_deadline;
}

final class wire_cst_Event_PaymentSuccessful extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<ffi.Uint64> fee_paid_msat;
}

final class wire_cst_Event_PaymentFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<ffi.Int32> reason;
}

final class wire_cst_Event_PaymentReceived extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  @ffi.Uint64()
  external int amount_msat;
}

final class wire_cst_txid extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hash;
}

final class wire_cst_out_point extends ffi.Struct {
  external wire_cst_txid txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_Event_ChannelPending extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_channel_id> former_temporary_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  external ffi.Pointer<wire_cst_out_point> funding_txo;
}

final class wire_cst_Event_ChannelReady extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;
}

final class wire_cst_Event_ChannelClosed extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_user_channel_id> user_channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  external ffi.Pointer<wire_cst_closure_reason> reason;
}

final class EventKind extends ffi.Union {
  external wire_cst_Event_PaymentClaimable PaymentClaimable;

  external wire_cst_Event_PaymentSuccessful PaymentSuccessful;

  external wire_cst_Event_PaymentFailed PaymentFailed;

  external wire_cst_Event_PaymentReceived PaymentReceived;

  external wire_cst_Event_ChannelPending ChannelPending;

  external wire_cst_Event_ChannelReady ChannelReady;

  external wire_cst_Event_ChannelClosed ChannelClosed;
}

final class wire_cst_event extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external EventKind kind;
}

final class wire_cst_lsp_fee_limits extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> max_total_opening_fee_msat;

  external ffi.Pointer<ffi.Uint64> max_proportional_opening_fee_ppm_msat;
}

final class wire_cst_node_announcement_info extends ffi.Struct {
  @ffi.Uint32()
  external int last_update;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> alias;

  external ffi.Pointer<wire_cst_list_socket_address> addresses;
}

final class wire_cst_list_prim_u_64_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_node_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_64_strict> channels;

  external ffi.Pointer<wire_cst_node_announcement_info> announcement_info;
}

final class wire_cst_offer_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_payment_secret extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_PaymentKind_Bolt11 extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;
}

final class wire_cst_PaymentKind_Bolt11Jit extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;

  external ffi.Pointer<wire_cst_lsp_fee_limits> lsp_fee_limits;
}

final class wire_cst_PaymentKind_Spontaneous extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;
}

final class wire_cst_PaymentKind_Bolt12Offer extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;

  external ffi.Pointer<wire_cst_offer_id> offer_id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payer_note;

  external ffi.Pointer<ffi.Uint64> quantity;
}

final class wire_cst_PaymentKind_Bolt12Refund extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_hash> hash;

  external ffi.Pointer<wire_cst_payment_preimage> preimage;

  external ffi.Pointer<wire_cst_payment_secret> secret;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payer_note;

  external ffi.Pointer<ffi.Uint64> quantity;
}

final class PaymentKindKind extends ffi.Union {
  external wire_cst_PaymentKind_Bolt11 Bolt11;

  external wire_cst_PaymentKind_Bolt11Jit Bolt11Jit;

  external wire_cst_PaymentKind_Spontaneous Spontaneous;

  external wire_cst_PaymentKind_Bolt12Offer Bolt12Offer;

  external wire_cst_PaymentKind_Bolt12Refund Bolt12Refund;
}

final class wire_cst_payment_kind extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PaymentKindKind kind;
}

final class wire_cst_payment_details extends ffi.Struct {
  external wire_cst_payment_id id;

  external wire_cst_payment_kind kind;

  external ffi.Pointer<ffi.Uint64> amount_msat;

  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int status;

  @ffi.Uint64()
  external int latest_update_timestamp;
}

final class wire_cst_channel_details extends ffi.Struct {
  external wire_cst_channel_id channel_id;

  external wire_cst_public_key counterparty_node_id;

  external ffi.Pointer<wire_cst_out_point> funding_txo;

  @ffi.Uint64()
  external int channel_value_sats;

  external ffi.Pointer<ffi.Uint64> unspendable_punishment_reserve;

  external wire_cst_user_channel_id user_channel_id;

  @ffi.Uint32()
  external int feerate_sat_per_1000_weight;

  @ffi.Uint64()
  external int outbound_capacity_msat;

  @ffi.Uint64()
  external int inbound_capacity_msat;

  external ffi.Pointer<ffi.Uint32> confirmations_required;

  external ffi.Pointer<ffi.Uint32> confirmations;

  @ffi.Bool()
  external bool is_outbound;

  @ffi.Bool()
  external bool is_channel_ready;

  @ffi.Bool()
  external bool is_usable;

  external ffi.Pointer<ffi.Uint16> cltv_expiry_delta;

  @ffi.Uint64()
  external int counterparty_unspendable_punishment_reserve;

  external ffi.Pointer<ffi.Uint64> counterparty_outbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> counterparty_outbound_htlc_maximum_msat;

  external ffi.Pointer<ffi.Uint32> counterparty_forwarding_info_fee_base_msat;

  external ffi.Pointer<ffi.Uint32>
      counterparty_forwarding_info_fee_proportional_millionths;

  external ffi.Pointer<ffi.Uint16>
      counterparty_forwarding_info_cltv_expiry_delta;

  @ffi.Uint64()
  external int next_outbound_htlc_limit_msat;

  @ffi.Uint64()
  external int next_outbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint16> force_close_spend_delay;

  @ffi.Uint64()
  external int inbound_htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> inbound_htlc_maximum_msat;

  external wire_cst_channel_config config;
}

final class wire_cst_list_channel_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_LightningBalance_ClaimableOnChannelClose
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint64()
  external int transaction_fee_satoshis;

  @ffi.Uint64()
  external int outbound_payment_htlc_rounded_msat;

  @ffi.Uint64()
  external int outbound_forwarded_htlc_rounded_msat;

  @ffi.Uint64()
  external int inbound_claiming_htlc_rounded_msat;

  @ffi.Uint64()
  external int inbound_htlc_rounded_msat;
}

final class wire_cst_LightningBalance_ClaimableAwaitingConfirmations
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int confirmation_height;

  @ffi.Int32()
  external int source;
}

final class wire_cst_LightningBalance_ContentiousClaimable extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int timeout_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  external ffi.Pointer<wire_cst_payment_preimage> payment_preimage;
}

final class wire_cst_LightningBalance_MaybeTimeoutClaimableHTLC
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int claimable_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;

  @ffi.Bool()
  external bool outbound_payment;
}

final class wire_cst_LightningBalance_MaybePreimageClaimableHTLC
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;

  @ffi.Uint32()
  external int expiry_height;

  external ffi.Pointer<wire_cst_payment_hash> payment_hash;
}

final class wire_cst_LightningBalance_CounterpartyRevokedOutputClaimable
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_public_key> counterparty_node_id;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class LightningBalanceKind extends ffi.Union {
  external wire_cst_LightningBalance_ClaimableOnChannelClose
      ClaimableOnChannelClose;

  external wire_cst_LightningBalance_ClaimableAwaitingConfirmations
      ClaimableAwaitingConfirmations;

  external wire_cst_LightningBalance_ContentiousClaimable ContentiousClaimable;

  external wire_cst_LightningBalance_MaybeTimeoutClaimableHTLC
      MaybeTimeoutClaimableHTLC;

  external wire_cst_LightningBalance_MaybePreimageClaimableHTLC
      MaybePreimageClaimableHTLC;

  external wire_cst_LightningBalance_CounterpartyRevokedOutputClaimable
      CounterpartyRevokedOutputClaimable;
}

final class wire_cst_lightning_balance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LightningBalanceKind kind;
}

final class wire_cst_list_lightning_balance extends ffi.Struct {
  external ffi.Pointer<wire_cst_lightning_balance> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_node_id extends ffi.Struct {
  external ffi.Pointer<wire_cst_node_id> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_payment_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_peer_details extends ffi.Struct {
  external wire_cst_public_key node_id;

  external wire_cst_socket_address address;

  @ffi.Bool()
  external bool is_connected;
}

final class wire_cst_list_peer_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_peer_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_PendingSweepBalance_PendingBroadcast extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class wire_cst_PendingSweepBalance_BroadcastAwaitingConfirmation
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  @ffi.Uint32()
  external int latest_broadcast_height;

  external ffi.Pointer<wire_cst_txid> latest_spending_txid;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class wire_cst_PendingSweepBalance_AwaitingThresholdConfirmations
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_channel_id> channel_id;

  external ffi.Pointer<wire_cst_txid> latest_spending_txid;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> confirmation_hash;

  @ffi.Uint32()
  external int confirmation_height;

  @ffi.Uint64()
  external int amount_satoshis;
}

final class PendingSweepBalanceKind extends ffi.Union {
  external wire_cst_PendingSweepBalance_PendingBroadcast PendingBroadcast;

  external wire_cst_PendingSweepBalance_BroadcastAwaitingConfirmation
      BroadcastAwaitingConfirmation;

  external wire_cst_PendingSweepBalance_AwaitingThresholdConfirmations
      AwaitingThresholdConfirmations;
}

final class wire_cst_pending_sweep_balance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PendingSweepBalanceKind kind;
}

final class wire_cst_list_pending_sweep_balance extends ffi.Struct {
  external ffi.Pointer<wire_cst_pending_sweep_balance> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_balance_details extends ffi.Struct {
  @ffi.Uint64()
  external int total_onchain_balance_sats;

  @ffi.Uint64()
  external int spendable_onchain_balance_sats;

  @ffi.Uint64()
  external int total_lightning_balance_sats;

  external ffi.Pointer<wire_cst_list_lightning_balance> lightning_balances;

  external ffi.Pointer<wire_cst_list_pending_sweep_balance>
      pending_balances_from_channel_closures;
}

final class wire_cst_best_block extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> block_hash;

  @ffi.Uint32()
  external int height;
}

final class wire_cst_bolt_12_invoice extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> data;
}

final class wire_cst_FfiNodeError_Decode extends ffi.Struct {
  external ffi.Pointer<wire_cst_decode_error> field0;
}

final class wire_cst_FfiNodeError_Bolt12Parse extends ffi.Struct {
  external ffi.Pointer<wire_cst_bolt_12_parse_error> field0;
}

final class FfiNodeErrorKind extends ffi.Union {
  external wire_cst_FfiNodeError_Decode Decode;

  external wire_cst_FfiNodeError_Bolt12Parse Bolt12Parse;
}

final class wire_cst_ffi_node_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external FfiNodeErrorKind kind;
}

final class wire_cst_node_status extends ffi.Struct {
  @ffi.Bool()
  external bool is_running;

  @ffi.Bool()
  external bool is_listening;

  external wire_cst_best_block current_best_block;

  external ffi.Pointer<ffi.Uint64> latest_lightning_wallet_sync_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_onchain_wallet_sync_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_fee_rate_cache_update_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_rgs_snapshot_timestamp;

  external ffi.Pointer<ffi.Uint64> latest_node_announcement_broadcast_timestamp;

  external ffi.Pointer<ffi.Uint32> latest_channel_monitor_archival_height;
}

final class wire_cst_QrPaymentResult_Onchain extends ffi.Struct {
  external ffi.Pointer<wire_cst_txid> txid;
}

final class wire_cst_QrPaymentResult_Bolt11 extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;
}

final class wire_cst_QrPaymentResult_Bolt12 extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_id> payment_id;
}

final class QrPaymentResultKind extends ffi.Union {
  external wire_cst_QrPaymentResult_Onchain Onchain;

  external wire_cst_QrPaymentResult_Bolt11 Bolt11;

  external wire_cst_QrPaymentResult_Bolt12 Bolt12;
}

final class wire_cst_qr_payment_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external QrPaymentResultKind kind;
}
