// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'error.freezed.dart';

@freezed
sealed class Bolt12ParseError with _$Bolt12ParseError {
  const Bolt12ParseError._();

  const factory Bolt12ParseError.invalidContinuation() =
      Bolt12ParseError_InvalidContinuation;
  const factory Bolt12ParseError.invalidBech32Hrp() =
      Bolt12ParseError_InvalidBech32Hrp;
  const factory Bolt12ParseError.bech32(
    String field0,
  ) = Bolt12ParseError_Bech32;
  const factory Bolt12ParseError.decode(
    DecodeError field0,
  ) = Bolt12ParseError_Decode;
  const factory Bolt12ParseError.invalidSemantics(
    String field0,
  ) = Bolt12ParseError_InvalidSemantics;
  const factory Bolt12ParseError.invalidSignature(
    String field0,
  ) = Bolt12ParseError_InvalidSignature;
}

@freezed
sealed class DecodeError with _$DecodeError {
  const DecodeError._();

  const factory DecodeError.unknownVersion() = DecodeError_UnknownVersion;
  const factory DecodeError.unknownRequiredFeature() =
      DecodeError_UnknownRequiredFeature;
  const factory DecodeError.invalidValue() = DecodeError_InvalidValue;
  const factory DecodeError.shortRead() = DecodeError_ShortRead;
  const factory DecodeError.badLengthDescriptor() =
      DecodeError_BadLengthDescriptor;
  const factory DecodeError.io(
    String field0,
  ) = DecodeError_Io;
  const factory DecodeError.unsupportedCompression() =
      DecodeError_UnsupportedCompression;
  const factory DecodeError.dangerousValue() = DecodeError_DangerousValue;
}

enum FfiBuilderError {
  invalidNodeAlias,
  socketAddressParseError,

  /// The given seed bytes are invalid, e.g., have invalid length.
  invalidSeedBytes,

  /// The given seed file is invalid, e.g., has invalid length, or could not be read.
  invalidSeedFile,

  /// The current system time is invalid, clocks might have gone backwards.
  invalidSystemTime,

  /// The a read channel monitor is invalid.
  invalidChannelMonitor,

  /// The given listening addresses are invalid, e.g. too many were passed.
  invalidListeningAddress,

  /// We failed to read data from the [`KVStore`].
  readFailed,

  /// We failed to write data to the [`KVStore`].
  writeFailed,

  /// We failed to access the given `storage_dir_path`.
  storagePathAccessFailed,

  /// We failed to setup our [`KVStore`].
  kvStoreSetupFailed,

  /// We failed to setup the onchain wallet.
  walletSetupFailed,

  /// We failed to setup the logger.
  loggerSetupFailed,
  invalidPublicKey,
  ;
}

@freezed
sealed class FfiNodeError with _$FfiNodeError implements FrbException {
  const FfiNodeError._();

  const factory FfiNodeError.invalidTxid() = FfiNodeError_InvalidTxid;

  /// Returned when trying to start [Node] while it is already running.
  const factory FfiNodeError.alreadyRunning() = FfiNodeError_AlreadyRunning;

  /// Returned when trying to stop [Node] while it is not running.
  const factory FfiNodeError.notRunning() = FfiNodeError_NotRunning;

  /// An on-chain transaction could not be created.
  const factory FfiNodeError.onchainTxCreationFailed() =
      FfiNodeError_OnchainTxCreationFailed;

  /// A network connection has been closed.
  const factory FfiNodeError.connectionFailed() = FfiNodeError_ConnectionFailed;

  /// Invoice creation failed.
  const factory FfiNodeError.invoiceCreationFailed() =
      FfiNodeError_InvoiceCreationFailed;

  /// Sending a payment has failed.
  const factory FfiNodeError.paymentSendingFailed() =
      FfiNodeError_PaymentSendingFailed;

  /// Sending a payment probe has failed.
  const factory FfiNodeError.probeSendingFailed() =
      FfiNodeError_ProbeSendingFailed;

  /// A channel could not be opened.
  const factory FfiNodeError.channelCreationFailed() =
      FfiNodeError_ChannelCreationFailed;

  /// A channel could not be closed.
  const factory FfiNodeError.channelClosingFailed() =
      FfiNodeError_ChannelClosingFailed;

  /// A channel config could not be updated.
  const factory FfiNodeError.channelConfigUpdateFailed() =
      FfiNodeError_ChannelConfigUpdateFailed;

  /// Persistence failed.
  const factory FfiNodeError.persistenceFailed() =
      FfiNodeError_PersistenceFailed;

  /// A wallet operation failed.
  const factory FfiNodeError.walletOperationFailed() =
      FfiNodeError_WalletOperationFailed;

  /// A signing operation for transaction failed.
  const factory FfiNodeError.onchainTxSigningFailed() =
      FfiNodeError_OnchainTxSigningFailed;

  /// A signing operation for message failed.
  const factory FfiNodeError.messageSigningFailed() =
      FfiNodeError_MessageSigningFailed;

  /// A transaction sync operation failed.
  const factory FfiNodeError.txSyncFailed() = FfiNodeError_TxSyncFailed;

  /// A gossip updating operation failed.
  const factory FfiNodeError.gossipUpdateFailed() =
      FfiNodeError_GossipUpdateFailed;

  /// The given address is invalid.
  const factory FfiNodeError.invalidAddress() = FfiNodeError_InvalidAddress;

  /// The given network address is invalid.
  const factory FfiNodeError.invalidSocketAddress() =
      FfiNodeError_InvalidSocketAddress;

  /// The given public key is invalid.
  const factory FfiNodeError.invalidPublicKey() = FfiNodeError_InvalidPublicKey;

  /// The given secret key is invalid.
  const factory FfiNodeError.invalidSecretKey() = FfiNodeError_InvalidSecretKey;

  /// The given payment hash is invalid.
  const factory FfiNodeError.invalidPaymentHash() =
      FfiNodeError_InvalidPaymentHash;

  /// The given payment preimage is invalid.
  const factory FfiNodeError.invalidPaymentPreimage() =
      FfiNodeError_InvalidPaymentPreimage;

  /// The given payment secret is invalid.
  const factory FfiNodeError.invalidPaymentSecret() =
      FfiNodeError_InvalidPaymentSecret;

  /// The given amount is invalid.
  const factory FfiNodeError.invalidAmount() = FfiNodeError_InvalidAmount;

  /// The given invoice is invalid.
  const factory FfiNodeError.invalidInvoice() = FfiNodeError_InvalidInvoice;

  /// The given channel ID is invalid.
  const factory FfiNodeError.invalidChannelId() = FfiNodeError_InvalidChannelId;

  /// The given network is invalid.
  const factory FfiNodeError.invalidNetwork() = FfiNodeError_InvalidNetwork;

  /// A payment with the given hash has already been initiated.
  const factory FfiNodeError.duplicatePayment() = FfiNodeError_DuplicatePayment;

  /// There are insufficient funds to complete the given operation.
  const factory FfiNodeError.insufficientFunds() =
      FfiNodeError_InsufficientFunds;

  ///A fee rate estimation update failed.
  const factory FfiNodeError.feerateEstimationUpdateFailed() =
      FfiNodeError_FeerateEstimationUpdateFailed;

  ///A liquidity request operation failed.
  const factory FfiNodeError.liquidityRequestFailed() =
      FfiNodeError_LiquidityRequestFailed;

  ///The given operation failed due to the required liquidity source being unavailable.
  const factory FfiNodeError.liquiditySourceUnavailable() =
      FfiNodeError_LiquiditySourceUnavailable;

  ///The given operation failed due to the LSP's required opening fee being too high.
  const factory FfiNodeError.liquidityFeeTooHigh() =
      FfiNodeError_LiquidityFeeTooHigh;

  ///The given payment id is invalid.
  const factory FfiNodeError.invalidPaymentId() = FfiNodeError_InvalidPaymentId;

  ///An error in decoding a message or struct.
  const factory FfiNodeError.decode(
    DecodeError field0,
  ) = FfiNodeError_Decode;

  ///An error in decoding the Bolt12 offer.
  const factory FfiNodeError.bolt12Parse(
    Bolt12ParseError field0,
  ) = FfiNodeError_Bolt12Parse;

  ///Invoice request creation failed.
  const factory FfiNodeError.invoiceRequestCreationFailed() =
      FfiNodeError_InvoiceRequestCreationFailed;

  ///Offer creation failed.
  const factory FfiNodeError.offerCreationFailed() =
      FfiNodeError_OfferCreationFailed;

  ///Refund creation failed.
  const factory FfiNodeError.refundCreationFailed() =
      FfiNodeError_RefundCreationFailed;

  ///A fee rate estimation update timed out.
  const factory FfiNodeError.feerateEstimationUpdateTimeout() =
      FfiNodeError_FeerateEstimationUpdateTimeout;

  ///A wallet operation timed out.
  const factory FfiNodeError.walletOperationTimeout() =
      FfiNodeError_WalletOperationTimeout;

  ///A transaction sync operation timed out.
  const factory FfiNodeError.txSyncTimeout() = FfiNodeError_TxSyncTimeout;

  ///A gossip updating operation timed out.
  const factory FfiNodeError.gossipUpdateTimeout() =
      FfiNodeError_GossipUpdateTimeout;

  ///The given offer id is invalid.
  const factory FfiNodeError.invalidOfferId() = FfiNodeError_InvalidOfferId;

  ///The given node id is invalid.
  const factory FfiNodeError.invalidNodeId() = FfiNodeError_InvalidNodeId;

  ///The given offer is invalid.
  const factory FfiNodeError.invalidOffer() = FfiNodeError_InvalidOffer;

  ///The given refund is invalid.
  const factory FfiNodeError.invalidRefund() = FfiNodeError_InvalidRefund;

  ///The provided offer was denominated in an unsupported currency.
  const factory FfiNodeError.unsupportedCurrency() =
      FfiNodeError_UnsupportedCurrency;
  const factory FfiNodeError.uriParameterParsingFailed() =
      FfiNodeError_UriParameterParsingFailed;
  const factory FfiNodeError.invalidUri() = FfiNodeError_InvalidUri;
  const factory FfiNodeError.invalidQuantity() = FfiNodeError_InvalidQuantity;
  const factory FfiNodeError.invalidNodeAlias() = FfiNodeError_InvalidNodeAlias;
}
