// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import '../utils/error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'types.dart';
part 'unified_qr.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`

class FfiUnifiedQrPayment {
  final UnifiedQrPayment opaque;

  const FfiUnifiedQrPayment({
    required this.opaque,
  });

  /// can always pay using the provided on-chain address, while newer wallets will
  /// typically opt to use the provided BOLT11 invoice or BOLT12 offer.
  ///
  /// # Parameters
  /// - `amount_sats`: The amount to be received, specified in satoshis.
  /// - `description`: A description or note associated with the payment.
  ///   This message is visible to the payer and can provide context or details about the payment.
  /// - `expiry_sec`: The expiration time for the payment, specified in seconds.
  ///
  /// Returns a payable URI that can be used to request and receive a payment of the amount
  /// given. In case of an error, the function throws `:WalletOperationFailed`for on-chain
  /// address issues, `InvoiceCreationFailed` for BOLT11 invoice issues, or
  /// `OfferCreationFailed` for BOLT12 offer issues.
  ///
  /// The generated URI can then be given to a QR code library.
  ///
  /// [BOLT 11]: https://github.com/lightning/bolts/blob/master/11-payment-encoding.md
  /// [BOLT 12]: https://github.com/lightning/bolts/blob/master/12-offer-encoding.md
  Future<String> receive(
          {required BigInt amountSats,
          required String message,
          required int expirySec}) =>
      core.instance.api.crateApiUnifiedQrFfiUnifiedQrPaymentReceive(
          that: this,
          amountSats: amountSats,
          message: message,
          expirySec: expirySec);

  ///Sends a payment given a BIP 21 URI.
  ///This method parses the provided URI string and attempts to send the payment. If the URI has an offer and or invoice, it will try to pay the offer first followed by the invoice. If they both fail, the on-chain payment will be paid.
  Future<QrPaymentResult> send({required String uriStr}) => core.instance.api
      .crateApiUnifiedQrFfiUnifiedQrPaymentSend(that: this, uriStr: uriStr);

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiUnifiedQrPayment &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}

@freezed
sealed class QrPaymentResult with _$QrPaymentResult {
  const QrPaymentResult._();

  /// An on-chain payment.
  const factory QrPaymentResult.onchain({
    /// The transaction ID (txid) of the on-chain payment.
    required Txid txid,
  }) = QrPaymentResult_Onchain;

  /// A [BOLT 11] payment.
  ///
  /// [BOLT 11]: https://github.com/lightning/bolts/blob/master/11-payment-encoding.md
  const factory QrPaymentResult.bolt11({
    /// The payment ID for the BOLT11 invoice.
    required PaymentId paymentId,
  }) = QrPaymentResult_Bolt11;

  /// A [BOLT 12] offer payment, i.e., a payment for an [Offer].
  ///
  /// [BOLT 12]: https://github.com/lightning/bolts/blob/master/12-offer-encoding.md
  const factory QrPaymentResult.bolt12({
    /// The payment ID for the BOLT12 offer.
    required PaymentId paymentId,
  }) = QrPaymentResult_Bolt12;
}
